api:
  availability:
    tags:
      - Order
    description: |
      Get information about whether a material can be ordered /
      are available for the currently logged in user. Holdingstatus holds information about holdings on specified library.
      OrderPossible indicates if a book can be ordered at current library.
    required:
      - pid
    properties:
      pid:
        description: pid of the work to order
        type: string
        example: "870970-basis:24284565"
    response:
      example: {"holdingstatus": {"willLend": true, "expectedDelivery": "2016-04-15"}, orderPossible: true}
  events:
    tags:
      - CMS
    description:
      List of events at the library where the application is logged in

      The requests are passed directly to/from the DDBCMS-API.
    properties:
      agency:
        description: Agency ID to fetch content for
        type: string
        example: 761500
      nids:
        description: to fetch events specified by ids
        type: array
        items: {type: "string"}
        example: ["15"]
      limit:
        description: number of items to get. This is passed to the DDBCMS-API, which decides how many to return. (currently usually less than the requested limit/amount).
        type: integer
        minimum: 1
        example: 10
      offset:
        description: offset to first item to get. This is passed to the ddb-cms.
        minimum: 0
        type: integer
        example: 10
      fields:
        description: which parts of the response to get
        type: array
        items: {type: "string"}
        example: ["nid", "title"]
    response:
      example: [{"nid": "15", "title": {"name": "Titel", "value": "Mød forfatteren: Tim Buk-Swienty", "attr": []}, "...": "..."}, "..."]
    examples:
      - request: {"offset": 0, "limit": 2, "fields": ["nid", "title"]}
      - request: {"nids": ["15"]}
  facets:
    tags:
      - Search
    description: Facets of a search result
    required:
      - q
    properties:
      q:
        description: Query to find facets for. |
          The query is expressed in CQL, see https://en.wikipedia.org/wiki/Contextual_Query_Language

          A guide to CQL in danish, with list of the indexes available in this API is available on http://www.danbib.dk/broend3_soeg
        type: string
      fields:
        description: |
          Limits the facets fetched. The default fields are `creator`, `subject`, `language`, `date`, and `form`.

          The possible options are `access`, `acSource`, `audience`, `audienceCategory`, `branch`, `category`, `creator`, `creatorFunction`, `date`, `department`, `dk5`, `extraTitles`, `fictionSubject`, `form`, `gamePlatform`, `genre`, `genreCategory`, `geographic`, `language`, `level`, `let`, `literaryForm`, `lix`, `musicSubject`, `nationality`, `nonFictionSubject`, `partOf`, `period`, `primaryCreator`, `sheetMusic`, `subject`, `titleSeries`, and `type`.
        type: array
        items: {type: "string"}
        example: ["creator", "subject", "type"]
      limit:
        description: number of facets per type
        type: integer
        minimum: 1
        example: 2
    response:
      $ref: "#/definitions/FacetsResults"
      example: { "creator": [{ "term": "nordisk ministerråd", "frequency": 2708}, { "term": "nordisk råd", "frequency": 2463}], "subject": [{ "term": "danmark", "frequency": 188792}, { "term": "historie", "frequency": 19867}], "type": "tidsskriftsartikel"}
  library:
    tags:
      - CMS
    description: |
      The library endpoint returns information from the ding_library type in the cmscontent service.
    properties:
      agency:
        description: Agency ID to fetch content for
        type: string
        example: 761500
      nids:
        description: to fetch events specified by ids
        type: array
        items: {type: "string"}
        example: ["15"]
      limit:
        description: number of items to get. This is passed to the DDBCMS-API, which decides how many to return. (currently usually less than the requested limit/amount).
        type: integer
        minimum: 1
        example: 10
      offset:
        description: offset to first item to get. This is passed to the ddb-cms.
        minimum: 0
        type: integer
        example: 10
  libraries:
    tags:
      - Libraries
    description: |
      List/information about libraries.

      The possible result fields are a subset of those returned from DBCs openagency service.

      The field that tells which information is required when ordering the book is `orderParameters`.
    properties:
      agencyIds:
        description: ids (or isil) of agencies of libraries to fetch, - an agency is a collection of libraries, - return all libraries if neither `branchIds` nor `agencyIds` are supplied
        type: array
        items: {type: "string"}
      branchIds:
        description: ids (or isil) of libraries to fetch - return all libraries if neither `branchIds` nor `agencyIds` are supplied
        type: array
        items: {type: "string"}
      fields:
        description: which information about the library that is needed
        type: array
        items: {type: "string"}
        example: ["branchId", "city", "geolocation"]
    examples:
      - request: { "fields": ["branchId", "city", "longitude", "latitude", "geolocation"]}
      - request: { "branchIds": ["700401", "710104"], "fields": ["branchId", "city", "geolocation"]}
  news:
    tags:
      - CMS
    description: |
      News-posts about the library.

      The requests are passed directly to/from the DDBCMS-API.
    properties:
      agency:
        description: Agency ID to fetch content for
        type: string
        example: 761500
      nids:
        description: to fetch news specified by ids
        type: array
        items: {type: "string"}
      limit:
        description: number of items to get. This is passed to the DDBCMS-API, which decides how many to return. (currently usually less than the requested limit/amount).
        type: integer
        minimum: 1
      offset:
        description: offset to first item to get. This is passed to the ddb-cms.
        minimum: 0
        type: integer
    response:
      example: [{"nid": "19", "title": {"name": "Titel", "value": "Sportsstjerner - bag facaden", "attr": []}, "...": "..."}, "..."]
    examples:
      - request: {"offset": 0, "limit": 2, "fields": ["nid", "title"]}
      - request: {"nids": ["19"]}
  order:
    tags:
      - Order
    description: Order a library material, or remove an existing order.
    properties:
      orderId:
        description: The identifier for the order, deleting an order. You get this from `/user`-status. Depending on the kind of order, it can take a long time from ordering, until the material with the orderId appears in the user status.
        type: string
        example: "1234"
      pids:
        description: The pids of the material to order. Several pids can be given, for example if you want to order a book, but does not care which of the editions. Required, and only applicable to new orders when making a new order.
        example: ["870970-basis:51989252"]
        type: array
        items: {type: "string"}
      library:
        description: The library branch id to deliver to. Required when making a new order. The branch id must belong the the agency where the user is logged in. (relationships between agencies and branches can be looked up in the `/libraries` endpoint)
        type: string
        example: "700401"
      name:
        description: The full name of the user. Required when making new order for some libraries, - check the /libraries endpoint.
        type: string
        example: Jens Jensen
      address:
        description: The address of the user. Required when making new order for some libraries, - check the /libraries endpoint.
        example: Kirkestræde 1, 1234 Landsby
        type: string
      email:
        description: The email of the user. Required when making new order for some libraries, - check the /libraries endpoint.
        example: jens.jensen@example.com
        type: string
      phone:
        description: The phone number of the user. Required when making new order for some libraries, - check the /libraries endpoint.
        example: 12345678
        type: string
      expires:
        description: When the order expires if not fullfilled.
        type: string
        example: 2016-06-24
      delete:
        description: whether to delete an order, - not applicable to new orders.
        type: 'boolean'
        example: true
    response:
      example: { "status": "ok" }
    examples:
      - request: { "orderId": "1234", "delete": true }
        response: { "orderId": "1234", "deleted": true }
  rank:
    tags:
      - Recommend
    description: Similar to recommend, but sorts a list of ids in order of relevance, given a recommender with likes, dislikes and so on.
    required:
      - pids
    properties:
      pids:
        description: list of materials that should be ranked
        type: array
        items: {type: "string"}
        example: ["870970-basis:12345678", "..."]
      recommender:
        description: the type of recommender, such as default or popular
        type: string
        example: default
      like:
        description: list of liked materials
        type: array
        items: {type: "string"}
        example: ["870970-basis:12345678", "..."]
      dislike:
        description: list of disliked materials
        type: array
        items: {type: "string"}
        example: ["870970-basis:12345678", "..."]
      known:
        description: list of materials that is related to the user
        type: array
        items: {type: "string"}
        example: ["870970-basis:12345678", "..."]
      limit:
        example: 10
        description: Maximum number of recommendations returned. This is also limited by the recommender, so currently no more than 99 results are returned.
        type: integer
        minimum: 1
    response:
      example: [ { "title": "Harry Potter og Fønixordenen", "creator": "...", "weight": 123, "pid": "300185-katalog:100562332", "fromPid": "870970-basis:51989252"}, "..."]
  recommend:
    tags:
      - Recommend
    description: Get recommendations based on a list of likes
    properties:
      recommender:
        description: the type of recommender, such as default or popular
        type: string
        example: default
      like:
        description: list of liked materials
        type: array
        items: {type: "string"}
        example: ["870970-basis:12345678", "..."]
      dislike:
        description: list of disliked materials
        type: array
        items: {type: "string"}
        example: ["870970-basis:12345678", "..."]
      known:
        description: list of materials that is related to the user
        type: array
        items: {type: "string"}
        example: ["870970-basis:12345678", "..."]
      discard:
        description: list of materials that should not be returned from the recommender
        type: array
        items: {type: "string"}
        example: ["870970-basis:12345678", "..."]
      limit:
        example: 10
        minimum: 1
        description: maximum number of results returned
        type: integer
    response:
      example: [ { "title": "Harry Potter og Fønixordenen", "creator": "...", "weight": 123, "pid": "300185-katalog:100562332", "fromPid": "870970-basis:51989252"}, "..."]
  renew:
    tags:
      - Status
    description: Renew a material
    properties:
      loanId:
        description: id of the loan to renew
        type: string
        example: "7890"
    response:
      example: {"loanId": "7890", "returnDate": "2016-09-12"}
    responses:
      403:
        $ref: '#/responses/InvalidUser'

  search:
    tags:
      - Search
    description: Search for a library material.
    required:
      - q
    properties:
      q:
        example: "harry AND potter"
        description: Query to search for. |
          The query is expressed in CQL, see https://en.wikipedia.org/wiki/Contextual_Query_Language

          A guide to CQL in danish, with list of the indexes available in this API is available on http://www.danbib.dk/broend3_soeg
        type: string
      offset:
        example: 0
        description: Starting position in search result
        type: integer
        minimum: 0
      limit:
        example: 10
        description: maximum number of results returned
        minimum: 1
        maximum: 50
        type: integer
      fields:
        example: ["title", "creator", "pid"]
        description: |
          Which fields to return. Limiting the fields can also yield a performance improvement.

          The entire list of possible fields can be seen on https://raw.githubusercontent.com/DBCDK/serviceprovider/master/doc/work-context.jsonld

          If `fields` are omitted, only the collection-field, and the fields from DKABM and BriefDisplay is returned.
        type: array
        items: {type: "string"}
      sort:
        example: "rank_title"
        description: Order/ranking of results. This correspond to the `sort` parameter of opensearch, which, at the time of writing, can take values such as  `rank_title`, `rank_general`, `rank_main_title`, `rank_subject`, `rank_verification` (title and creator), `rank_creator`, `rank_none`, `date_descending`, `article_date_descending`, `acquisitionDate_descending`, and `random`.
        type: string
      profile:
        example: "opac"
        description: Optional search profile, it's passed directly to OpenSearch. In OpenSearch it's used to determine which works should be returned. The profile needs to be defined in VIP in order to use it.
        type: string
    response:
      $ref: '#/definitions/SearchResponse'
      example: [{"identifier": ["300185-katalog:100562332"], "dcTitle": ["Harry Potter og Fønixordenen DVD"], "coverUrlFull": ["https://moreinfo.addi.dk/2.1/more_info_get.php?id=36565894&type=forside_500&key=55d553c259c9e46291a4"]}, {"identifier": ["870970-basis:51989252"], "dcTitle": ["Harry Potter og de vises sten"], "collection": ["300185-katalog:100562332", "870970-basis:51989252", "870971-forfweb:86203219", "870970-basis:24284514", "870970-basis:24284565", "..."], "dcSubjectDBCF": ["fantasy", "magi", "troldmænd"], "hasAdaption": ["870970-basis:27123279", "870970-basis:27963390"], "coverUrlFull": ["https://moreinfo.addi.dk/2.1/more_info_get.php?id=36565894&type=forside_500&key=55d553c259c9e46291a4"]}]
    examples:
      - request: { "q": "harry AND potter", "fields": ["identifier", "title", "collection", "subjectDBCF", "hasAdaptation", "coverUrlFull"], "sort": "rank_general", "offset": 2, "limit": 2 }
        response: [{"identifier": ["300185-katalog:100562332"], "title": ["Harry Potter og Fønixordenen DVD"], "coverUrlFull": ["https://moreinfo.addi.dk/2.1/more_info_get.php?id=36565894&type=forside_500&key=55d553c259c9e46291a4"]}, {"identifier": ["870970-basis:51989252"], "title": ["Harry Potter og de vises sten"], "collection": ["300185-katalog:100562332", "870970-basis:51989252", "870971-forfweb:86203219", "870970-basis:24284514", "870970-basis:24284565", "..."], "subjectDBCF": ["fantasy", "magi", "troldmænd"], "hasAdaption": ["870970-basis:27123279", "870970-basis:27963390"], "coverUrlFull": ["https://moreinfo.addi.dk/2.1/more_info_get.php?id=36565894&type=forside_500&key=55d553c259c9e46291a4"]}]
  suggest:
    tags:
      - Suggest
    description: |
      Suggestions for completing a query string.

      Notice that suggest/completion index is not real-time, so there is no guarantee that the `id` matches a bibliographic object in the `/work` endpoint, - though usually there will be one (they will be sync'ed every week).
    required:
      - q
      - type
    properties:
      q:
        description: Query to complete
        type: string
        example: "harry"
      limit:
        description: Maximum number of suggestions returned
        type: integer
        minimum: 1
        example: 10
      type:
        description: The desired type of suggestions, possible values are `library`, `title`, `subject`, `creator`
        type: string
        example: "title"
      librarytype:
        description: Optional field only used when querying the library suggestor. It specifies which type of library is wanted, by default it's the public library.
        type: string
        example: "folkebibliotek"
      fields:
        description: "Fields to return, defaults to `term`. The `subject`- and `creator`-suggest only has `term`, while `title`-suggest also has `pid`, `creator`, and `type`, and the `library`-suggest has `agencyName`, `postalAddress`, `branchId`, `postalCode`, `geolocation`, `agencyType`, and `city`"
        type: array
        items: {type: "string"}
        example: ["term", "pid", "creator", "type"]
    response:
      $ref: '#/definitions/SuggestResponse'
      example: [ { "term": "Harry Potter og Hemmelighedernes Kammer", "pid": "870970-basis:22375733", "creator": "Joanne K. Rowling", "type": "book"}, { "term": "Harry Potter og fangen fra Azkaban", "pid": "870970-basis:22639862", "creator": "Joanne K. Rowling", "type": "book" }]
    examples:
      - request: { "q": "harry", "type": "creator", "limit": 2 }
        response: [ { "term": "Harry Nilsson"}, { "term": "Harry Belafonte"}]
      - request: { "q": "harry pot", "type": "title", "limit": 2, "fields": ["term", "pid", "creator", "type"]}
        response: [ { "term": "Harry Potter og Hemmelighedernes Kammer", "pid": "870970-basis:22375733", "creator": "Joanne K. Rowling", "type": "book"}, { "term": "Harry Potter og fangen fra Azkaban", "pid": "870970-basis:22639862", "creator": "Joanne K. Rowling", "type": "book" }]
      - request: { "q": "køge", "type": "library", "limit": 1, "fields": ["term", "væsensnavn", "adresse", "id", "postnr", "geolokation", "navn", "bibliotekstype", "by"]}
        response: [ { "væsensnavn": "KøgeBibliotekerne", "adresse": "Kirkestræde 18", "id": "725900", "postnr": "4600", "geolokation": { "lat": 55.45783460000001, "lng": 12.1822443 }, "navn": "Køge Bibliotek", "bibliotekstype": "Folkebibliotek", "by": "Køge", "term": "Køge Bibliotek, Køge"}]
  user:
    tags:
      - Status
    description: |
      User status, including arrived loans, orders, unique id, etc.
    properties: {}
    example: {}
    response:
      example:
        id: "U2VydmljZVByb3ZpZGVy"
        library: "710100"
        loans:
          - loanId: "4940377131"
            title: håndbog over håndbøger
            creator: La, Chris
            dueDate: "2016-04-16"
            materialId: "9782361951085"
            titleId: "51680057"
        orders:
          - orderId: "Hold:24395923"
            status: "In process"
            pickUpAgency: "DK-710111"
            holdQueuePosition: "1"
            creator: "Madsen, Peter, f. 1958"
            title: "Eventyrbogen"
            orderDate: "2016-05-27T00:00:00+02:00"
          - orderId: "Hold:24400334"
            status: "Available for pickup"
            pickUpAgency: "DK-710111"
            holdQueuePosition: "1"
            creator: "Lindgren, Astrid"
            title: "Emils skarnsstreg nr. 325"
            orderDate: "2016-05-30T00:00:00+02:00"
            pickUpExpiryDate: "2016-06-04T00:00:00+02:00"
            pickUpId: "Nummer 16"
        debt:
          - amount: "20"
            currency: DKK
            date: 2015-11-21
            creator: Kristín Marja Baldursdóttir
            title: Kantate
    responses:
      403:
        $ref: '#/responses/InvalidUser'
  work:
    tags:
      - Search
    description: Retrieve meta information about a creative work
    properties:
      pids:
        description: The ids of the materials to look up. You should at most look up 20 ids per API call.
        type: array
        maxItems: 20
        items: {type: "string"}
        example: ["870970-basis:51989252"]
      fields:
        description: |
          Which fields to return. Limiting the fields can also yield a performance improvement.

          The entire list of possible fields can be seen on https://raw.githubusercontent.com/DBCDK/serviceprovider/master/doc/work-context.jsonld

          If `fields` are omitted, all fields are returned, except `cover*`, and `collection`.
        type: array
        items: {type: "string"}
        example: ["title", "collection", "dcSubjectDBCF", "hasAdaptation", "coverUrlFull"]
    response:
      $ref: '#/definitions/SearchResponse'
      example: [{ "dcTitle": ["Harry Potter og de vises sten"], "collection": ["300185-katalog:100562332", "870970-basis:51989252", "870971-forfweb:86203219", "870970-basis:24284514", "870970-basis:24284565", "..."], "dcSubjectDBCF": ["fantasy", "magi", "troldmænd"], "hasAdaption": ["870970-basis:27123279", "870970-basis:27963390"], "coverUrlFull": ["https://moreinfo.addi.dk/2.1/more_info_get.php?id=36565894&type=forside_500&key=55d553c259c9e46291a4"]}]
    examples:
      - request: { "pids": ["870970-basis:51989252",], "fields": ["title", "collection", "subjectDBCF", "hasAdaptation", "coverUrlFull"]}
        response: [{"title": ["Harry Potter og de vises sten"], "collection": ["300185-katalog:100562332", "870970-basis:51989252", "870971-forfweb:86203219", "870970-basis:24284514", "870970-basis:24284565", "..."], "subjectDBCF": ["fantasy", "magi", "troldmænd"], "hasAdaption": ["870970-basis:27123279", "870970-basis:27963390"], "coverUrlFull": ["https://moreinfo.addi.dk/2.1/more_info_get.php?id=36565894&type=forside_500&key=55d553c259c9e46291a4"]}]

defaultProperties:
  fields:
    description: which parts of the response to get
    type: array
    items: {type: "string"}
  access_token:
    type: 'string'
    description: 'Access token from the OAuth2 server'
    example: 'qwerty'
  pretty:
    description: 'whether to prettyprint the resulting json'
    type: 'boolean'
    example: true
  timings:
    description: 'whether to include timings in the resulting json'
    type: 'boolean'
    example: true
  createTest:
    description: name of test to create, or "random" for random name, or "mockfile" for writing mockfile.
    type: 'string'
    example: "random"
    noSwag: true
  callback:
    type: 'string'
    noSwag: true
