
// We don't want to instrument with babel when running coverage, as it's pre-instrumented.
if (process.env.NODE_ENV !== 'cucumber-coverage') {
  require('babel-register')();
}

// Libraries
const http = require('http');
const events = require('events');
const request = require('supertest');
const fs = require('fs');
const nock = require('nock');
const urlParse = require('url').parse;
const querystringParser = require('querystring').parse;
const app = require('../../src/app');

// Create a mock of the worker object to receive run everything in a single thread.
const workerMock = new events.EventEmitter();
workerMock.httpServer = http.createServer();

// Create a supertest wrapper that can call our app.
const api = request(app.run(workerMock));

// This regex is used to inject the times parameter into the generated nock code.
const autogeneratedNockModifierRegex = /(post|get)(\(.+\))(\n  \.)/gi;

function loadMock(mockName, times) {
  // Where to look for the mock required by the current test.
  const mockPath = `${__dirname}/../__mocks__/${mockName}.mock.js`;

  try {
    // We try to require the mock and run it.
    const mockRunner = require(mockPath);
    mockRunner(times);
  }
  catch (err) {
    // No mock found, create it!
    console.log('Creating mock for:', mockName);

    this.recording = true;
    this.mockPath = mockPath;
    this.mockName = mockName;

    try {
      nock.recorder.rec({
        dont_print: true,
        output_objects: true
      });
    }
    catch (nockError) {
      console.error('error occurred while creating mock:', nockError);
    }
  }
}

function beforeHookHandler() {
  // Set supertest wrapper to this so we can access it from steps.
  this.api = api;
  this.loadMock = loadMock.bind(this);
}

function afterHookHandler() {
  if (this.recording) {
    const mockPath = this.mockPath;
    const mockName = this.mockName;

    this.recording = false;
    this.mockPath = null;
    this.mockName = null;

    const nockObject = nock.recorder.play()
      .filter(reqres => reqres.scope.indexOf('127.0.0.1') >= 0)
      .map(reqres => {
      const url = urlParse(reqres.scope + reqres.path, true);

      return `
        nock('${reqres.scope}', {encodedQueryParams: true})
          .${reqres.method.toLowerCase()}('${url.pathname}')
          .times(times)
          ${Object.keys(url.query).length > 0 ? `.query(${JSON.stringify(url.query)})` : ''}
          .reply(${reqres.status}, ${JSON.stringify(reqres.response)});`
    });

    const mockFileContents = `// Autogenerated!\nconst nock = require('nock'); \nmodule.exports = function ${mockName} (times) {${nockObject.join('\n')}};\n`;
    fs.writeFileSync(mockPath, mockFileContents);
    console.log('Mock created:', mockName);
  }
}

function hooks() {
  this.Before(beforeHookHandler);
  this.After(afterHookHandler);
}

module.exports = hooks;
