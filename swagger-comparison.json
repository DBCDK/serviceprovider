{
  "swagger": "2.0",
  "info": {
    "version": "3.0.0",
    "title": "Open Platform",
    "description": ""
  },
  "basePath": "/v3",
  "schemes": [
    "https",
    "wss"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/availability": {
      "post": {
        "tags": [
          "Order"
        ],
        "description": "Get information about an items delivery status (can be ordered / are available)\nfor the currently logged in user at a specific library.\n",
        "parameters": [
          {
            "name": "request",
            "description": "Request object",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "pids",
                "access_token"
              ],
              "properties": {
                "fields": {
                  "description": "which parts of the response to get",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "access_token": {
                  "type": "string",
                  "description": "Access token from the OAuth2 server",
                  "example": "qwerty"
                },
                "pretty": {
                  "description": "whether to prettyprint the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "timings": {
                  "description": "whether to include timings in the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "pids": {
                  "description": "pids of the works to check availability for",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "870970-basis:24284565"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/AvailabilityResponse",
                  "example": [
                    {
                      "willLend": true,
                      "expectedDelivery": "2016-04-15",
                      "orderPossible": true
                    }
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "get": {
        "tags": [
          "Order"
        ],
        "description": "Get information about an items delivery status (can be ordered / are available)\nfor the currently logged in user at a specific library.\n",
        "parameters": [
          {
            "description": "which parts of the response to get",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "fields"
          },
          {
            "type": "string",
            "description": "Access token from the OAuth2 server",
            "in": "query",
            "required": true,
            "name": "access_token"
          },
          {
            "description": "whether to prettyprint the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "pretty"
          },
          {
            "description": "whether to include timings in the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "timings"
          },
          {
            "description": "pids of the works to check availability for",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": true,
            "name": "pids"
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/AvailabilityResponse",
                  "example": [
                    {
                      "willLend": true,
                      "expectedDelivery": "2016-04-15",
                      "orderPossible": true
                    }
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/events": {
      "post": {
        "tags": [
          "CMS"
        ],
        "description": "List of events at the library where the application is logged in\nThe requests are passed directly to/from the DDBCMS-API.",
        "parameters": [
          {
            "name": "request",
            "description": "Request object",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "access_token"
              ],
              "properties": {
                "fields": {
                  "description": "which parts of the response to get",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "nid",
                    "title"
                  ]
                },
                "access_token": {
                  "type": "string",
                  "description": "Access token from the OAuth2 server",
                  "example": "qwerty"
                },
                "pretty": {
                  "description": "whether to prettyprint the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "timings": {
                  "description": "whether to include timings in the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "agency": {
                  "description": "Agency ID to fetch content for. Defaults to agency in log in, if not specified.",
                  "type": "string",
                  "example": 761500
                },
                "nids": {
                  "description": "to fetch events specified by ids",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "15"
                  ]
                },
                "limit": {
                  "description": "number of items to get. This is passed to the DDBCMS-API, which decides how many to return. (currently usually less than the requested limit/amount).",
                  "type": "integer",
                  "minimum": 1,
                  "example": 10
                },
                "offset": {
                  "description": "offset to first item to get. This is passed to the ddb-cms.",
                  "minimum": 0,
                  "type": "integer",
                  "example": 10
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/EventsResponse",
                  "example": [
                    {
                      "nid": "15",
                      "title": {
                        "name": "Titel",
                        "value": "Mød forfatteren: Tim Buk-Swienty",
                        "attr": []
                      },
                      "...": "..."
                    },
                    "..."
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "get": {
        "tags": [
          "CMS"
        ],
        "description": "List of events at the library where the application is logged in\nThe requests are passed directly to/from the DDBCMS-API.",
        "parameters": [
          {
            "description": "which parts of the response to get",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "fields"
          },
          {
            "type": "string",
            "description": "Access token from the OAuth2 server",
            "in": "query",
            "required": true,
            "name": "access_token"
          },
          {
            "description": "whether to prettyprint the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "pretty"
          },
          {
            "description": "whether to include timings in the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "timings"
          },
          {
            "description": "Agency ID to fetch content for. Defaults to agency in log in, if not specified.",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "agency"
          },
          {
            "description": "to fetch events specified by ids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "nids"
          },
          {
            "description": "number of items to get. This is passed to the DDBCMS-API, which decides how many to return. (currently usually less than the requested limit/amount).",
            "type": "integer",
            "minimum": 1,
            "in": "query",
            "required": false,
            "name": "limit"
          },
          {
            "description": "offset to first item to get. This is passed to the ddb-cms.",
            "minimum": 0,
            "type": "integer",
            "in": "query",
            "required": false,
            "name": "offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/EventsResponse",
                  "example": [
                    {
                      "nid": "15",
                      "title": {
                        "name": "Titel",
                        "value": "Mød forfatteren: Tim Buk-Swienty",
                        "attr": []
                      },
                      "...": "..."
                    },
                    "..."
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/facets": {
      "post": {
        "tags": [
          "Search"
        ],
        "description": "Facets of a search result",
        "parameters": [
          {
            "name": "request",
            "description": "Request object",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "q",
                "access_token"
              ],
              "properties": {
                "fields": {
                  "description": "Limits the facets fetched. The default fields are `creator`, `subject`, `language`, `date`, and `form`.\n\nThe possible options are `access`, `acSource`, `audience`, `audienceCategory`, `branch`, `category`, `creator`, `creatorFunction`, `date`, `department`, `dk5`, `extraTitles`, `fictionSubject`, `form`, `gamePlatform`, `genre`, `genreCategory`, `geographic`, `language`, `level`, `let`, `literaryForm`, `lix`, `musicSubject`, `nationality`, `nonFictionSubject`, `partOf`, `period`, `primaryCreator`, `sheetMusic`, `subject`, `titleSeries`, and `type`.\n",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "creator",
                    "subject",
                    "type"
                  ]
                },
                "access_token": {
                  "type": "string",
                  "description": "Access token from the OAuth2 server",
                  "example": "qwerty"
                },
                "pretty": {
                  "description": "whether to prettyprint the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "timings": {
                  "description": "whether to include timings in the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "q": {
                  "description": "Query to find facets for. | The query is expressed in CQL, see https://en.wikipedia.org/wiki/Contextual_Query_Language\nA guide to CQL in danish, with list of the indexes available in this API is available on http://www.danbib.dk/broend3_soeg",
                  "type": "string"
                },
                "limit": {
                  "description": "number of facets per type",
                  "type": "integer",
                  "minimum": 1,
                  "example": 2
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/FacetsResults",
                  "example": {
                    "creator": [
                      {
                        "term": "nordisk ministerråd",
                        "frequency": 2708
                      },
                      {
                        "term": "nordisk råd",
                        "frequency": 2463
                      }
                    ],
                    "subject": [
                      {
                        "term": "danmark",
                        "frequency": 188792
                      },
                      {
                        "term": "historie",
                        "frequency": 19867
                      }
                    ],
                    "type": "tidsskriftsartikel"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "get": {
        "tags": [
          "Search"
        ],
        "description": "Facets of a search result",
        "parameters": [
          {
            "description": "Limits the facets fetched. The default fields are `creator`, `subject`, `language`, `date`, and `form`.\n\nThe possible options are `access`, `acSource`, `audience`, `audienceCategory`, `branch`, `category`, `creator`, `creatorFunction`, `date`, `department`, `dk5`, `extraTitles`, `fictionSubject`, `form`, `gamePlatform`, `genre`, `genreCategory`, `geographic`, `language`, `level`, `let`, `literaryForm`, `lix`, `musicSubject`, `nationality`, `nonFictionSubject`, `partOf`, `period`, `primaryCreator`, `sheetMusic`, `subject`, `titleSeries`, and `type`.\n",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "fields"
          },
          {
            "type": "string",
            "description": "Access token from the OAuth2 server",
            "in": "query",
            "required": true,
            "name": "access_token"
          },
          {
            "description": "whether to prettyprint the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "pretty"
          },
          {
            "description": "whether to include timings in the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "timings"
          },
          {
            "description": "Query to find facets for. | The query is expressed in CQL, see https://en.wikipedia.org/wiki/Contextual_Query_Language\nA guide to CQL in danish, with list of the indexes available in this API is available on http://www.danbib.dk/broend3_soeg",
            "type": "string",
            "in": "query",
            "required": true,
            "name": "q"
          },
          {
            "description": "number of facets per type",
            "type": "integer",
            "minimum": 1,
            "in": "query",
            "required": false,
            "name": "limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/FacetsResults",
                  "example": {
                    "creator": [
                      {
                        "term": "nordisk ministerråd",
                        "frequency": 2708
                      },
                      {
                        "term": "nordisk råd",
                        "frequency": 2463
                      }
                    ],
                    "subject": [
                      {
                        "term": "danmark",
                        "frequency": 188792
                      },
                      {
                        "term": "historie",
                        "frequency": 19867
                      }
                    ],
                    "type": "tidsskriftsartikel"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/library": {
      "post": {
        "tags": [
          "CMS"
        ],
        "description": "The library endpoint returns information from the ding_library type in the cmscontent service.\n",
        "parameters": [
          {
            "name": "request",
            "description": "Request object",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "access_token"
              ],
              "properties": {
                "fields": {
                  "description": "which parts of the response to get",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "access_token": {
                  "type": "string",
                  "description": "Access token from the OAuth2 server",
                  "example": "qwerty"
                },
                "pretty": {
                  "description": "whether to prettyprint the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "timings": {
                  "description": "whether to include timings in the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "agency": {
                  "description": "Agency ID to fetch content for",
                  "type": "string",
                  "example": 761500
                },
                "nids": {
                  "description": "to fetch events specified by ids",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "15"
                  ]
                },
                "limit": {
                  "description": "number of items to get. This is passed to the DDBCMS-API, which decides how many to return. (currently usually less than the requested limit/amount).",
                  "type": "integer",
                  "minimum": 1,
                  "example": 10
                },
                "offset": {
                  "description": "offset to first item to get. This is passed to the ddb-cms.",
                  "minimum": 0,
                  "type": "integer",
                  "example": 10
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/LibraryResponse"
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "get": {
        "tags": [
          "CMS"
        ],
        "description": "The library endpoint returns information from the ding_library type in the cmscontent service.\n",
        "parameters": [
          {
            "description": "which parts of the response to get",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "fields"
          },
          {
            "type": "string",
            "description": "Access token from the OAuth2 server",
            "in": "query",
            "required": true,
            "name": "access_token"
          },
          {
            "description": "whether to prettyprint the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "pretty"
          },
          {
            "description": "whether to include timings in the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "timings"
          },
          {
            "description": "Agency ID to fetch content for",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "agency"
          },
          {
            "description": "to fetch events specified by ids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "nids"
          },
          {
            "description": "number of items to get. This is passed to the DDBCMS-API, which decides how many to return. (currently usually less than the requested limit/amount).",
            "type": "integer",
            "minimum": 1,
            "in": "query",
            "required": false,
            "name": "limit"
          },
          {
            "description": "offset to first item to get. This is passed to the ddb-cms.",
            "minimum": 0,
            "type": "integer",
            "in": "query",
            "required": false,
            "name": "offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/LibraryResponse"
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/libraries": {
      "post": {
        "tags": [
          "Libraries"
        ],
        "description": "List/information about libraries.\n\nThe possible result fields are a subset of those returned from DBCs openagency service.\n\nThe field that tells which information is required when ordering the book is `orderParameters`.\n",
        "parameters": [
          {
            "name": "request",
            "description": "Request object",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "access_token"
              ],
              "properties": {
                "fields": {
                  "description": "which information about the library that is needed",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "branchId",
                    "city",
                    "geolocation"
                  ]
                },
                "access_token": {
                  "type": "string",
                  "description": "Access token from the OAuth2 server",
                  "example": "qwerty"
                },
                "pretty": {
                  "description": "whether to prettyprint the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "timings": {
                  "description": "whether to include timings in the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "agencyIds": {
                  "description": "ids (or isil) of agencies of libraries to fetch, - an agency is a collection of libraries, - return all libraries if neither `branchIds` nor `agencyIds` are supplied",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "branchIds": {
                  "description": "ids (or isil) of libraries to fetch - return all libraries if neither `branchIds` nor `agencyIds` are supplied",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/LibrariesResponse",
                  "example": [
                    {
                      "agencyName": "Varde Bibliotek",
                      "agencyId": "757300",
                      "agencyType": "Folkebibliotek",
                      "agencyEmail": "biblioteket@vardebib.dk",
                      "agencyPhone": "75 22 10 88",
                      "agencyCvrNumber": "29189811",
                      "agencyPNumber": "1006399153",
                      "agencyEanNumber": "5798004822784",
                      "branchId": "757302",
                      "branchType": "f",
                      "branchName": [
                        "Nr. Nebel Bibliotek"
                      ],
                      "branchShortName": [
                        "Nørre Nebel"
                      ],
                      "branchPhone": "75288682",
                      "branchEmail": "biblioteket@vardebib.dk",
                      "branchIsAgency": "0",
                      "postalAddress": "Sønder Allé 21",
                      "postalCode": "6830",
                      "city": "Nørre Nebel",
                      "isil": "DK-757302",
                      "branchPNumber": "1016594683",
                      "branchCatalogueUrl": "https://www.vardebib.dk",
                      "lookupUrl": "https://www.vardebib.dk/ting/object/757300%3A",
                      "branchWebsiteUrl": "http://www.vardebib.dk/varde",
                      "userStatusUrl": "https://www.vardebib.dk",
                      "librarydkSupportEmail": "voksen@vardebib.dk",
                      "librarydkSupportPhone": "76946917",
                      "openingHours": [
                        "Mandag-søndag 7-22\r\n\r\nBetjening:\r\nMandag 10.00-13.00\r\nOnsdag og fredag 14.00-17.00",
                        "Monday-Sunday 7 a.m-10 p.m\r\n\r\nService:\r\nMonday 10 a.m- 1 p.m\r\nWednesday and Friday 2 p.m-5 p.m"
                      ],
                      "temporarilyClosed": "0",
                      "illOrderReceiptText": [
                        "Tak for din bestilling, den vil blive behandlet inden for 8 arbejdstimer",
                        "Thank you for your order. It will be executed within 24 hours"
                      ],
                      "pickupAllowed": "1",
                      "dropOffBranch": "757302",
                      "dropOffName": "Nr. Nebel Bibliotek",
                      "lastUpdated": "2017-12-14T00:00:00+01:00",
                      "isOclcRsLibrary": "0",
                      "stateAndUniversityLibraryCopyService": "1",
                      "geolocation": {
                        "latitude": "55.77804",
                        "longitude": "8.294803"
                      },
                      "orderParameters": [
                        "cardno",
                        "pincode",
                        "name",
                        "email"
                      ]
                    }
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "get": {
        "tags": [
          "Libraries"
        ],
        "description": "List/information about libraries.\n\nThe possible result fields are a subset of those returned from DBCs openagency service.\n\nThe field that tells which information is required when ordering the book is `orderParameters`.\n",
        "parameters": [
          {
            "description": "which information about the library that is needed",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "fields"
          },
          {
            "type": "string",
            "description": "Access token from the OAuth2 server",
            "in": "query",
            "required": true,
            "name": "access_token"
          },
          {
            "description": "whether to prettyprint the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "pretty"
          },
          {
            "description": "whether to include timings in the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "timings"
          },
          {
            "description": "ids (or isil) of agencies of libraries to fetch, - an agency is a collection of libraries, - return all libraries if neither `branchIds` nor `agencyIds` are supplied",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "agencyIds"
          },
          {
            "description": "ids (or isil) of libraries to fetch - return all libraries if neither `branchIds` nor `agencyIds` are supplied",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "branchIds"
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/LibrariesResponse",
                  "example": [
                    {
                      "agencyName": "Varde Bibliotek",
                      "agencyId": "757300",
                      "agencyType": "Folkebibliotek",
                      "agencyEmail": "biblioteket@vardebib.dk",
                      "agencyPhone": "75 22 10 88",
                      "agencyCvrNumber": "29189811",
                      "agencyPNumber": "1006399153",
                      "agencyEanNumber": "5798004822784",
                      "branchId": "757302",
                      "branchType": "f",
                      "branchName": [
                        "Nr. Nebel Bibliotek"
                      ],
                      "branchShortName": [
                        "Nørre Nebel"
                      ],
                      "branchPhone": "75288682",
                      "branchEmail": "biblioteket@vardebib.dk",
                      "branchIsAgency": "0",
                      "postalAddress": "Sønder Allé 21",
                      "postalCode": "6830",
                      "city": "Nørre Nebel",
                      "isil": "DK-757302",
                      "branchPNumber": "1016594683",
                      "branchCatalogueUrl": "https://www.vardebib.dk",
                      "lookupUrl": "https://www.vardebib.dk/ting/object/757300%3A",
                      "branchWebsiteUrl": "http://www.vardebib.dk/varde",
                      "userStatusUrl": "https://www.vardebib.dk",
                      "librarydkSupportEmail": "voksen@vardebib.dk",
                      "librarydkSupportPhone": "76946917",
                      "openingHours": [
                        "Mandag-søndag 7-22\r\n\r\nBetjening:\r\nMandag 10.00-13.00\r\nOnsdag og fredag 14.00-17.00",
                        "Monday-Sunday 7 a.m-10 p.m\r\n\r\nService:\r\nMonday 10 a.m- 1 p.m\r\nWednesday and Friday 2 p.m-5 p.m"
                      ],
                      "temporarilyClosed": "0",
                      "illOrderReceiptText": [
                        "Tak for din bestilling, den vil blive behandlet inden for 8 arbejdstimer",
                        "Thank you for your order. It will be executed within 24 hours"
                      ],
                      "pickupAllowed": "1",
                      "dropOffBranch": "757302",
                      "dropOffName": "Nr. Nebel Bibliotek",
                      "lastUpdated": "2017-12-14T00:00:00+01:00",
                      "isOclcRsLibrary": "0",
                      "stateAndUniversityLibraryCopyService": "1",
                      "geolocation": {
                        "latitude": "55.77804",
                        "longitude": "8.294803"
                      },
                      "orderParameters": [
                        "cardno",
                        "pincode",
                        "name",
                        "email"
                      ]
                    }
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/news": {
      "post": {
        "tags": [
          "CMS"
        ],
        "description": "News-posts about the library.\n\nThe requests are passed directly to/from the DDBCMS-API.\n",
        "parameters": [
          {
            "name": "request",
            "description": "Request object",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "access_token"
              ],
              "properties": {
                "fields": {
                  "description": "which parts of the response to get",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "access_token": {
                  "type": "string",
                  "description": "Access token from the OAuth2 server",
                  "example": "qwerty"
                },
                "pretty": {
                  "description": "whether to prettyprint the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "timings": {
                  "description": "whether to include timings in the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "agency": {
                  "description": "Agency ID to fetch content for. Defaults to agency in log in, if not specified.",
                  "type": "string",
                  "example": 761500
                },
                "nids": {
                  "description": "to fetch news specified by ids",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "limit": {
                  "description": "number of items to get. This is passed to the DDBCMS-API, which decides how many to return. (currently usually less than the requested limit/amount).",
                  "type": "integer",
                  "minimum": 1
                },
                "offset": {
                  "description": "offset to first item to get. This is passed to the ddb-cms.",
                  "minimum": 0,
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/NewsResponse",
                  "example": [
                    {
                      "nid": "19",
                      "title": {
                        "name": "Titel",
                        "value": "Sportsstjerner - bag facaden",
                        "attr": []
                      },
                      "...": "..."
                    },
                    "..."
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "get": {
        "tags": [
          "CMS"
        ],
        "description": "News-posts about the library.\n\nThe requests are passed directly to/from the DDBCMS-API.\n",
        "parameters": [
          {
            "description": "which parts of the response to get",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "fields"
          },
          {
            "type": "string",
            "description": "Access token from the OAuth2 server",
            "in": "query",
            "required": true,
            "name": "access_token"
          },
          {
            "description": "whether to prettyprint the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "pretty"
          },
          {
            "description": "whether to include timings in the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "timings"
          },
          {
            "description": "Agency ID to fetch content for. Defaults to agency in log in, if not specified.",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "agency"
          },
          {
            "description": "to fetch news specified by ids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "nids"
          },
          {
            "description": "number of items to get. This is passed to the DDBCMS-API, which decides how many to return. (currently usually less than the requested limit/amount).",
            "type": "integer",
            "minimum": 1,
            "in": "query",
            "required": false,
            "name": "limit"
          },
          {
            "description": "offset to first item to get. This is passed to the ddb-cms.",
            "minimum": 0,
            "type": "integer",
            "in": "query",
            "required": false,
            "name": "offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/NewsResponse",
                  "example": [
                    {
                      "nid": "19",
                      "title": {
                        "name": "Titel",
                        "value": "Sportsstjerner - bag facaden",
                        "attr": []
                      },
                      "...": "..."
                    },
                    "..."
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/order": {
      "post": {
        "tags": [
          "Order"
        ],
        "description": "Order a library material, or remove an existing order. Notice: ordering a library material is asynchronous, so you cannot get an actual `orderId` back immediately. The `orsId` is an internal id from the ORS-system (used for a part of handling the order).",
        "parameters": [
          {
            "name": "request",
            "description": "Request object",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "access_token"
              ],
              "properties": {
                "fields": {
                  "description": "which parts of the response to get",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "access_token": {
                  "type": "string",
                  "description": "Access token from the OAuth2 server",
                  "example": "qwerty"
                },
                "pretty": {
                  "description": "whether to prettyprint the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "timings": {
                  "description": "whether to include timings in the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "orderId": {
                  "description": "The identifier for the order consist of orderId and orderType. Required for deleting an order. You get this from `/user`-status. Depending on the kind of order, it can take a long time from ordering, until the material with the orderId/orderType appears in the user status.",
                  "type": "string",
                  "example": "1234"
                },
                "orderType": {
                  "description": "The identifier for the order consist of orderId and orderType. Required for deleting an order. You get this from `/user`-status. Depending on the kind of order, it can take a long time from ordering, until the material with the orderId/orderType appears in the user status. Possible values for orderType are `Estimate`, `Hold`, `Loan`, `Non-returnable Copy`, `normal`, and `Stack Retrieval`",
                  "type": "string",
                  "example": "normal"
                },
                "pids": {
                  "description": "The pids of the material to order. Several pids can be given, for example if you want to order a book, but does not care which of the editions. Required, and only applicable to new orders when making a new order.",
                  "example": [
                    "870970-basis:51989252"
                  ],
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pickUpBranch": {
                  "description": "The library branch id to deliver to. Required when making a new order. The branch id must belong the the agency where the user is logged in. (relationships between agencies and branches can be looked up in the `/libraries` endpoint)",
                  "type": "string",
                  "example": "700401"
                },
                "name": {
                  "description": "The full name of the user. Required when making new order for some libraries, - check the /libraries endpoint.",
                  "type": "string",
                  "example": "Jens Jensen"
                },
                "address": {
                  "description": "The address of the user. Required when making new order for some libraries, - check the /libraries endpoint.",
                  "example": "Kirkestræde 1, 1234 Landsby",
                  "type": "string"
                },
                "email": {
                  "description": "The email of the user. Required when making new order for some libraries, - check the /libraries endpoint.",
                  "example": "jens.jensen@example.com",
                  "type": "string"
                },
                "phone": {
                  "description": "The phone number of the user. Required when making new order for some libraries, - check the /libraries endpoint.",
                  "example": 12345678,
                  "type": "string"
                },
                "expires": {
                  "description": "When the order expires if not fullfilled.",
                  "type": "string",
                  "example": "2016-06-24T00:00:00.000Z"
                },
                "delete": {
                  "description": "whether to delete an order, - not applicable to new orders.",
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/OrderResponse",
                  "example": {
                    "status": "ok",
                    "orsId": "1234567"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "get": {
        "tags": [
          "Order"
        ],
        "description": "Order a library material, or remove an existing order. Notice: ordering a library material is asynchronous, so you cannot get an actual `orderId` back immediately. The `orsId` is an internal id from the ORS-system (used for a part of handling the order).",
        "parameters": [
          {
            "description": "which parts of the response to get",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "fields"
          },
          {
            "type": "string",
            "description": "Access token from the OAuth2 server",
            "in": "query",
            "required": true,
            "name": "access_token"
          },
          {
            "description": "whether to prettyprint the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "pretty"
          },
          {
            "description": "whether to include timings in the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "timings"
          },
          {
            "description": "The identifier for the order consist of orderId and orderType. Required for deleting an order. You get this from `/user`-status. Depending on the kind of order, it can take a long time from ordering, until the material with the orderId/orderType appears in the user status.",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "orderId"
          },
          {
            "description": "The identifier for the order consist of orderId and orderType. Required for deleting an order. You get this from `/user`-status. Depending on the kind of order, it can take a long time from ordering, until the material with the orderId/orderType appears in the user status. Possible values for orderType are `Estimate`, `Hold`, `Loan`, `Non-returnable Copy`, `normal`, and `Stack Retrieval`",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "orderType"
          },
          {
            "description": "The pids of the material to order. Several pids can be given, for example if you want to order a book, but does not care which of the editions. Required, and only applicable to new orders when making a new order.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "pids"
          },
          {
            "description": "The library branch id to deliver to. Required when making a new order. The branch id must belong the the agency where the user is logged in. (relationships between agencies and branches can be looked up in the `/libraries` endpoint)",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "pickUpBranch"
          },
          {
            "description": "The full name of the user. Required when making new order for some libraries, - check the /libraries endpoint.",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "name"
          },
          {
            "description": "The address of the user. Required when making new order for some libraries, - check the /libraries endpoint.",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "address"
          },
          {
            "description": "The email of the user. Required when making new order for some libraries, - check the /libraries endpoint.",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "email"
          },
          {
            "description": "The phone number of the user. Required when making new order for some libraries, - check the /libraries endpoint.",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "phone"
          },
          {
            "description": "When the order expires if not fullfilled.",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "expires"
          },
          {
            "description": "whether to delete an order, - not applicable to new orders.",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/OrderResponse",
                  "example": {
                    "status": "ok",
                    "orsId": "1234567"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/recommend": {
      "post": {
        "tags": [
          "Recommend"
        ],
        "description": "Get recommendations based on a list of likes etc. **Notice:** the response meta data is the internal recommender data, and is simplified/outdated. Use the search/work endpoint to get actual meta data.",
        "parameters": [
          {
            "name": "request",
            "description": "Request object",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "like",
                "access_token"
              ],
              "properties": {
                "fields": {
                  "description": "which parts of the response to get",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "access_token": {
                  "type": "string",
                  "description": "Access token from the OAuth2 server",
                  "example": "qwerty"
                },
                "pretty": {
                  "description": "whether to prettyprint the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "timings": {
                  "description": "whether to include timings in the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "like": {
                  "description": "list of liked materials",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "870970-basis:12345678",
                    "..."
                  ]
                },
                "ignore": {
                  "description": "List of pids to ignore (pids from the work they belong to will not be returned in recommendation list)",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "870970-basis:12345678",
                    "..."
                  ]
                },
                "limit": {
                  "example": 10,
                  "minimum": 1,
                  "description": "Paging. Number of items to return",
                  "type": "integer"
                },
                "offset": {
                  "example": 10,
                  "minimum": 0,
                  "description": "Paging. first item to return (defaults to 0)",
                  "type": "integer"
                },
                "filters": {
                  "description": "object containing filters to apply to recommendations",
                  "type": "object",
                  "properties": {
                    "authorFlood": {
                      "description": "The maximum number of recommendations from a single author in the result",
                      "type": "integer"
                    },
                    "subject": {
                      "description": "List of subjects. Only materials with one of these subjects are returned type array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "type": {
                      "description": "List of material types. Only materials with one of these subjects are returned type array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "language": {
                      "description": "List of languages. Only materials with one of these subjects are returned type array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "newerThan": {
                      "description": "Year. Only materials that are newer than this year are returned",
                      "type": "integer"
                    },
                    "olderThan": {
                      "description": "Year. Only materials that are older than this year are returned",
                      "type": "integer"
                    }
                  }
                },
                "boosters": {
                  "description": "object containing boosters to apply to recommendations",
                  "type": "object",
                  "properties": {
                    "loanCount": {
                      "description": "Boost on number of loans for each recommendations",
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/RecommendationResponse",
                  "example": [
                    {
                      "title": [
                        "Harry Potter og Fønixordenen"
                      ],
                      "creator": [
                        "..."
                      ],
                      "weight": 123,
                      "pid": [
                        "300185-katalog:100562332"
                      ]
                    },
                    "..."
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "get": {
        "tags": [
          "Recommend"
        ],
        "description": "Get recommendations based on a list of likes etc. **Notice:** the response meta data is the internal recommender data, and is simplified/outdated. Use the search/work endpoint to get actual meta data.",
        "parameters": [
          {
            "description": "which parts of the response to get",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "fields"
          },
          {
            "type": "string",
            "description": "Access token from the OAuth2 server",
            "in": "query",
            "required": true,
            "name": "access_token"
          },
          {
            "description": "whether to prettyprint the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "pretty"
          },
          {
            "description": "whether to include timings in the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "timings"
          },
          {
            "description": "list of liked materials",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": true,
            "name": "like"
          },
          {
            "description": "List of pids to ignore (pids from the work they belong to will not be returned in recommendation list)",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "ignore"
          },
          {
            "minimum": 1,
            "description": "Paging. Number of items to return",
            "type": "integer",
            "in": "query",
            "required": false,
            "name": "limit"
          },
          {
            "minimum": 0,
            "description": "Paging. first item to return (defaults to 0)",
            "type": "integer",
            "in": "query",
            "required": false,
            "name": "offset"
          },
          {
            "description": "object containing filters to apply to recommendations\n Parameter string contains a JSON encoded object. See POST-method for details",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "filters"
          },
          {
            "description": "object containing boosters to apply to recommendations\n Parameter string contains a JSON encoded object. See POST-method for details",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "boosters"
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/RecommendationResponse",
                  "example": [
                    {
                      "title": [
                        "Harry Potter og Fønixordenen"
                      ],
                      "creator": [
                        "..."
                      ],
                      "weight": 123,
                      "pid": [
                        "300185-katalog:100562332"
                      ]
                    },
                    "..."
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/renew": {
      "post": {
        "tags": [
          "Status"
        ],
        "description": "Renew a material",
        "parameters": [
          {
            "name": "request",
            "description": "Request object",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "loanId",
                "access_token"
              ],
              "properties": {
                "fields": {
                  "description": "which parts of the response to get",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "access_token": {
                  "type": "string",
                  "description": "Access token from the OAuth2 server",
                  "example": "qwerty"
                },
                "pretty": {
                  "description": "whether to prettyprint the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "timings": {
                  "description": "whether to include timings in the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "loanId": {
                  "description": "id of the loan to renew",
                  "type": "string",
                  "example": "7890"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/RenewResponse",
                  "example": {
                    "loanId": "7890",
                    "returnDate": "2016-09-12T00:00:00+01:00"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "403": {
            "$ref": "#/responses/InvalidUser"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "get": {
        "tags": [
          "Status"
        ],
        "description": "Renew a material",
        "parameters": [
          {
            "description": "which parts of the response to get",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "fields"
          },
          {
            "type": "string",
            "description": "Access token from the OAuth2 server",
            "in": "query",
            "required": true,
            "name": "access_token"
          },
          {
            "description": "whether to prettyprint the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "pretty"
          },
          {
            "description": "whether to include timings in the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "timings"
          },
          {
            "description": "id of the loan to renew",
            "type": "string",
            "in": "query",
            "required": true,
            "name": "loanId"
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/RenewResponse",
                  "example": {
                    "loanId": "7890",
                    "returnDate": "2016-09-12T00:00:00+01:00"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "403": {
            "$ref": "#/responses/InvalidUser"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/search": {
      "post": {
        "tags": [
          "Search"
        ],
        "description": "Search for a library material.",
        "parameters": [
          {
            "name": "request",
            "description": "Request object",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "q",
                "access_token"
              ],
              "properties": {
                "fields": {
                  "example": [
                    "title",
                    "creator",
                    "pid"
                  ],
                  "description": "Which fields to return. Limiting the fields can also yield a performance improvement.\n\nThe entire list of possible fields can be seen on https://raw.githubusercontent.com/DBCDK/serviceprovider/master/doc/work-context.jsonld\n\nIf `fields` are omitted, only the collection-field, and the fields from DKABM and BriefDisplay is returned.\n",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "access_token": {
                  "type": "string",
                  "description": "Access token from the OAuth2 server",
                  "example": "qwerty"
                },
                "pretty": {
                  "description": "whether to prettyprint the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "timings": {
                  "description": "whether to include timings in the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "q": {
                  "example": "harry AND potter",
                  "description": "Query to search for. | The query is expressed in CQL, see https://en.wikipedia.org/wiki/Contextual_Query_Language\nA guide to CQL in danish, with list of the indexes available in this API is available on http://www.danbib.dk/broend3_soeg",
                  "type": "string"
                },
                "offset": {
                  "example": 0,
                  "description": "Starting position in search result",
                  "type": "integer",
                  "minimum": 0
                },
                "limit": {
                  "example": 10,
                  "description": "maximum number of results returned",
                  "minimum": 1,
                  "maximum": 50,
                  "type": "integer"
                },
                "sort": {
                  "example": "rank_title",
                  "description": "Order/ranking of results. This correspond to the `sort` parameter of opensearch, which, at the time of writing, can take values such as  `rank_title`, `rank_general`, `rank_main_title`, `rank_subject`, `rank_verification` (title and creator), `rank_creator`, `rank_none`, `date_descending`, `article_date_descending`, `acquisitionDate_descending`, and `random`.",
                  "type": "string"
                },
                "profile": {
                  "example": "opac",
                  "description": "Optional search profile, it's passed directly to OpenSearch. In OpenSearch it's used to determine which works should be returned. The profile needs to be defined in VIP in order to use it.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/WorkResponse",
                  "example": [
                    {
                      "identifier": [
                        "300185-katalog:100562332"
                      ],
                      "dcTitle": [
                        "Harry Potter og Fønixordenen DVD"
                      ],
                      "coverUrlFull": [
                        "https://moreinfo.addi.dk/2.1/more_info_get.php?id=36565894&type=forside_500&key=55d553c259c9e46291a4"
                      ]
                    },
                    {
                      "identifier": [
                        "870970-basis:51989252"
                      ],
                      "dcTitle": [
                        "Harry Potter og de vises sten"
                      ],
                      "collection": [
                        "300185-katalog:100562332",
                        "870970-basis:51989252",
                        "870971-forfweb:86203219",
                        "870970-basis:24284514",
                        "870970-basis:24284565",
                        "..."
                      ],
                      "dcSubjectDBCF": [
                        "fantasy",
                        "magi",
                        "troldmænd"
                      ],
                      "hasAdaption": [
                        "870970-basis:27123279",
                        "870970-basis:27963390"
                      ],
                      "coverUrlFull": [
                        "https://moreinfo.addi.dk/2.1/more_info_get.php?id=36565894&type=forside_500&key=55d553c259c9e46291a4"
                      ]
                    }
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                },
                "hitCount": {
                  "description": "Number of search hits. Note that this does not equal the number of results/collections, as several hits might be combined to one collection.",
                  "type": "number"
                },
                "more": {
                  "description": "Whether there are more results/pages to fetch",
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "get": {
        "tags": [
          "Search"
        ],
        "description": "Search for a library material.",
        "parameters": [
          {
            "description": "Which fields to return. Limiting the fields can also yield a performance improvement.\n\nThe entire list of possible fields can be seen on https://raw.githubusercontent.com/DBCDK/serviceprovider/master/doc/work-context.jsonld\n\nIf `fields` are omitted, only the collection-field, and the fields from DKABM and BriefDisplay is returned.\n",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "fields"
          },
          {
            "type": "string",
            "description": "Access token from the OAuth2 server",
            "in": "query",
            "required": true,
            "name": "access_token"
          },
          {
            "description": "whether to prettyprint the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "pretty"
          },
          {
            "description": "whether to include timings in the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "timings"
          },
          {
            "description": "Query to search for. | The query is expressed in CQL, see https://en.wikipedia.org/wiki/Contextual_Query_Language\nA guide to CQL in danish, with list of the indexes available in this API is available on http://www.danbib.dk/broend3_soeg",
            "type": "string",
            "in": "query",
            "required": true,
            "name": "q"
          },
          {
            "description": "Starting position in search result",
            "type": "integer",
            "minimum": 0,
            "in": "query",
            "required": false,
            "name": "offset"
          },
          {
            "description": "maximum number of results returned",
            "minimum": 1,
            "maximum": 50,
            "type": "integer",
            "in": "query",
            "required": false,
            "name": "limit"
          },
          {
            "description": "Order/ranking of results. This correspond to the `sort` parameter of opensearch, which, at the time of writing, can take values such as  `rank_title`, `rank_general`, `rank_main_title`, `rank_subject`, `rank_verification` (title and creator), `rank_creator`, `rank_none`, `date_descending`, `article_date_descending`, `acquisitionDate_descending`, and `random`.",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "sort"
          },
          {
            "description": "Optional search profile, it's passed directly to OpenSearch. In OpenSearch it's used to determine which works should be returned. The profile needs to be defined in VIP in order to use it.",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "profile"
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/WorkResponse",
                  "example": [
                    {
                      "identifier": [
                        "300185-katalog:100562332"
                      ],
                      "dcTitle": [
                        "Harry Potter og Fønixordenen DVD"
                      ],
                      "coverUrlFull": [
                        "https://moreinfo.addi.dk/2.1/more_info_get.php?id=36565894&type=forside_500&key=55d553c259c9e46291a4"
                      ]
                    },
                    {
                      "identifier": [
                        "870970-basis:51989252"
                      ],
                      "dcTitle": [
                        "Harry Potter og de vises sten"
                      ],
                      "collection": [
                        "300185-katalog:100562332",
                        "870970-basis:51989252",
                        "870971-forfweb:86203219",
                        "870970-basis:24284514",
                        "870970-basis:24284565",
                        "..."
                      ],
                      "dcSubjectDBCF": [
                        "fantasy",
                        "magi",
                        "troldmænd"
                      ],
                      "hasAdaption": [
                        "870970-basis:27123279",
                        "870970-basis:27963390"
                      ],
                      "coverUrlFull": [
                        "https://moreinfo.addi.dk/2.1/more_info_get.php?id=36565894&type=forside_500&key=55d553c259c9e46291a4"
                      ]
                    }
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                },
                "hitCount": {
                  "description": "Number of search hits. Note that this does not equal the number of results/collections, as several hits might be combined to one collection.",
                  "type": "number"
                },
                "more": {
                  "description": "Whether there are more results/pages to fetch",
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/storage": {
      "post": {
        "tags": [
          "Community"
        ],
        "description": "Save / fetch / find arbitrary data.\n",
        "parameters": [
          {
            "name": "request",
            "description": "Request object",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "access_token"
              ],
              "properties": {
                "fields": {
                  "description": "which parts of the response to get",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "access_token": {
                  "type": "string",
                  "description": "Access token from the OAuth2 server",
                  "example": "qwerty"
                },
                "pretty": {
                  "description": "whether to prettyprint the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "timings": {
                  "description": "whether to include timings in the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "get": {
                  "description": "retrieve data",
                  "type": "string"
                },
                "put": {
                  "description": "save data",
                  "type": "object"
                },
                "find": {
                  "description": "retrieve data",
                  "type": "object"
                },
                "delete": {
                  "description": "delete data",
                  "type": "string"
                },
                "scan": {
                  "description": "scan through an index",
                  "type": "object"
                },
                "count": {
                  "description": "get number of (indexed) object",
                  "type": "object"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {},
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "get": {
        "tags": [
          "Community"
        ],
        "description": "Save / fetch / find arbitrary data.\n",
        "parameters": [
          {
            "description": "which parts of the response to get",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "fields"
          },
          {
            "type": "string",
            "description": "Access token from the OAuth2 server",
            "in": "query",
            "required": true,
            "name": "access_token"
          },
          {
            "description": "whether to prettyprint the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "pretty"
          },
          {
            "description": "whether to include timings in the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "timings"
          },
          {
            "description": "retrieve data",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "get"
          },
          {
            "description": "save data\n Parameter string contains a JSON encoded object. See POST-method for details",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "put"
          },
          {
            "description": "retrieve data\n Parameter string contains a JSON encoded object. See POST-method for details",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "find"
          },
          {
            "description": "delete data",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "delete"
          },
          {
            "description": "scan through an index\n Parameter string contains a JSON encoded object. See POST-method for details",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "scan"
          },
          {
            "description": "get number of (indexed) object\n Parameter string contains a JSON encoded object. See POST-method for details",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "count"
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {},
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/suggest": {
      "post": {
        "tags": [
          "Suggest"
        ],
        "description": "Suggestions for completing a query string.\n\nNotice that suggest/completion index is not real-time, so there is no guarantee that the `id` matches a bibliographic object in the `/work` endpoint, - though usually there will be one (they will be sync'ed every week).\n",
        "parameters": [
          {
            "name": "request",
            "description": "Request object",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "q",
                "access_token"
              ],
              "properties": {
                "fields": {
                  "description": "which parts of the response to get",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "access_token": {
                  "type": "string",
                  "description": "Access token from the OAuth2 server",
                  "example": "qwerty"
                },
                "pretty": {
                  "description": "whether to prettyprint the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "timings": {
                  "description": "whether to include timings in the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "q": {
                  "description": "Query to complete",
                  "type": "string",
                  "example": "harry"
                },
                "limit": {
                  "description": "Maximum number of suggestions returned",
                  "type": "integer",
                  "minimum": 1,
                  "example": 10
                },
                "type": {
                  "description": "The desired type of suggestions, possible values are `all`, `title`, `subject`, `creator`",
                  "type": "string",
                  "example": "title"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/SuggestResponse",
                  "example": [
                    {
                      "term": "harry potter og hemmelighedernes kammer"
                    },
                    {
                      "term": "harry potter og fangen fra azkaban"
                    }
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "get": {
        "tags": [
          "Suggest"
        ],
        "description": "Suggestions for completing a query string.\n\nNotice that suggest/completion index is not real-time, so there is no guarantee that the `id` matches a bibliographic object in the `/work` endpoint, - though usually there will be one (they will be sync'ed every week).\n",
        "parameters": [
          {
            "description": "which parts of the response to get",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "fields"
          },
          {
            "type": "string",
            "description": "Access token from the OAuth2 server",
            "in": "query",
            "required": true,
            "name": "access_token"
          },
          {
            "description": "whether to prettyprint the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "pretty"
          },
          {
            "description": "whether to include timings in the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "timings"
          },
          {
            "description": "Query to complete",
            "type": "string",
            "in": "query",
            "required": true,
            "name": "q"
          },
          {
            "description": "Maximum number of suggestions returned",
            "type": "integer",
            "minimum": 1,
            "in": "query",
            "required": false,
            "name": "limit"
          },
          {
            "description": "The desired type of suggestions, possible values are `all`, `title`, `subject`, `creator`",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "type"
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/SuggestResponse",
                  "example": [
                    {
                      "term": "harry potter og hemmelighedernes kammer"
                    },
                    {
                      "term": "harry potter og fangen fra azkaban"
                    }
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "Status"
        ],
        "description": "User status, including arrived loans, orders, unique id, etc.\n",
        "parameters": [
          {
            "name": "request",
            "description": "Request object",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "access_token"
              ],
              "properties": {
                "fields": {
                  "description": "which parts of the response to get",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "access_token": {
                  "type": "string",
                  "description": "Access token from the OAuth2 server",
                  "example": "qwerty"
                },
                "pretty": {
                  "description": "whether to prettyprint the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "timings": {
                  "description": "whether to include timings in the resulting json",
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/UserResponse",
                  "example": {
                    "id": "U2VydmljZVByb3ZpZGVy",
                    "agency": "710100",
                    "loans": [
                      {
                        "loanId": "4940377131",
                        "title": "håndbog over håndbøger",
                        "creator": "La, Chris",
                        "dueDate": "2016-04-16",
                        "materialId": "9782361951085",
                        "titleId": "51680057"
                      }
                    ],
                    "orders": [
                      {
                        "orderId": "24395923",
                        "orderType": "Hold",
                        "status": "In process",
                        "pickUpAgency": "DK-710111",
                        "holdQueuePosition": "1",
                        "creator": "Madsen, Peter, f. 1958",
                        "title": "Eventyrbogen",
                        "orderDate": "2016-05-27T00:00:00+02:00"
                      },
                      {
                        "orderId": "24400334",
                        "orderType": "normal",
                        "status": "Available for pickup",
                        "pickUpAgency": "DK-710111",
                        "holdQueuePosition": "1",
                        "creator": "Lindgren, Astrid",
                        "title": "Emils skarnsstreg nr. 325",
                        "orderDate": "2016-05-30T00:00:00+02:00",
                        "pickUpExpiryDate": "2016-06-04T00:00:00+02:00",
                        "pickUpId": "Nummer 16"
                      }
                    ],
                    "debt": [
                      {
                        "amount": "20",
                        "currency": "DKK",
                        "date": "2015-11-21T00:00:00.000Z",
                        "creator": "Kristín Marja Baldursdóttir",
                        "title": "Kantate"
                      }
                    ]
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "403": {
            "$ref": "#/responses/InvalidUser"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "get": {
        "tags": [
          "Status"
        ],
        "description": "User status, including arrived loans, orders, unique id, etc.\n",
        "parameters": [
          {
            "description": "which parts of the response to get",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "fields"
          },
          {
            "type": "string",
            "description": "Access token from the OAuth2 server",
            "in": "query",
            "required": true,
            "name": "access_token"
          },
          {
            "description": "whether to prettyprint the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "pretty"
          },
          {
            "description": "whether to include timings in the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "timings"
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/UserResponse",
                  "example": {
                    "id": "U2VydmljZVByb3ZpZGVy",
                    "agency": "710100",
                    "loans": [
                      {
                        "loanId": "4940377131",
                        "title": "håndbog over håndbøger",
                        "creator": "La, Chris",
                        "dueDate": "2016-04-16",
                        "materialId": "9782361951085",
                        "titleId": "51680057"
                      }
                    ],
                    "orders": [
                      {
                        "orderId": "24395923",
                        "orderType": "Hold",
                        "status": "In process",
                        "pickUpAgency": "DK-710111",
                        "holdQueuePosition": "1",
                        "creator": "Madsen, Peter, f. 1958",
                        "title": "Eventyrbogen",
                        "orderDate": "2016-05-27T00:00:00+02:00"
                      },
                      {
                        "orderId": "24400334",
                        "orderType": "normal",
                        "status": "Available for pickup",
                        "pickUpAgency": "DK-710111",
                        "holdQueuePosition": "1",
                        "creator": "Lindgren, Astrid",
                        "title": "Emils skarnsstreg nr. 325",
                        "orderDate": "2016-05-30T00:00:00+02:00",
                        "pickUpExpiryDate": "2016-06-04T00:00:00+02:00",
                        "pickUpId": "Nummer 16"
                      }
                    ],
                    "debt": [
                      {
                        "amount": "20",
                        "currency": "DKK",
                        "date": "2015-11-21T00:00:00.000Z",
                        "creator": "Kristín Marja Baldursdóttir",
                        "title": "Kantate"
                      }
                    ]
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "403": {
            "$ref": "#/responses/InvalidUser"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/work": {
      "post": {
        "tags": [
          "Search"
        ],
        "description": "Retrieve meta information about a creative work",
        "parameters": [
          {
            "name": "request",
            "description": "Request object",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "access_token"
              ],
              "properties": {
                "fields": {
                  "description": "Which fields to return. Limiting the fields can also yield a performance improvement.\n\nThe entire list of possible fields can be seen on https://raw.githubusercontent.com/DBCDK/serviceprovider/master/doc/work-context.jsonld\n\nIf `fields` are omitted, all fields are returned, except `cover*`, and `collection`.\n",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "title",
                    "collection",
                    "dcSubjectDBCF",
                    "hasAdaptation",
                    "coverUrlFull"
                  ]
                },
                "access_token": {
                  "type": "string",
                  "description": "Access token from the OAuth2 server",
                  "example": "qwerty"
                },
                "pretty": {
                  "description": "whether to prettyprint the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "timings": {
                  "description": "whether to include timings in the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "pids": {
                  "description": "The ids of the materials to look up. You should at most look up 20 ids per API call.",
                  "type": "array",
                  "maxItems": 20,
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "870970-basis:51989252"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/WorkResponse",
                  "example": [
                    {
                      "dcTitle": [
                        "Harry Potter og de vises sten"
                      ],
                      "collection": [
                        "300185-katalog:100562332",
                        "870970-basis:51989252",
                        "870971-forfweb:86203219",
                        "870970-basis:24284514",
                        "870970-basis:24284565",
                        "..."
                      ],
                      "dcSubjectDBCF": [
                        "fantasy",
                        "magi",
                        "troldmænd"
                      ],
                      "hasAdaption": [
                        "870970-basis:27123279",
                        "870970-basis:27963390"
                      ],
                      "coverUrlFull": [
                        "https://moreinfo.addi.dk/2.1/more_info_get.php?id=36565894&type=forside_500&key=55d553c259c9e46291a4"
                      ]
                    }
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "get": {
        "tags": [
          "Search"
        ],
        "description": "Retrieve meta information about a creative work",
        "parameters": [
          {
            "description": "Which fields to return. Limiting the fields can also yield a performance improvement.\n\nThe entire list of possible fields can be seen on https://raw.githubusercontent.com/DBCDK/serviceprovider/master/doc/work-context.jsonld\n\nIf `fields` are omitted, all fields are returned, except `cover*`, and `collection`.\n",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "fields"
          },
          {
            "type": "string",
            "description": "Access token from the OAuth2 server",
            "in": "query",
            "required": true,
            "name": "access_token"
          },
          {
            "description": "whether to prettyprint the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "pretty"
          },
          {
            "description": "whether to include timings in the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "timings"
          },
          {
            "description": "The ids of the materials to look up. You should at most look up 20 ids per API call.",
            "type": "array",
            "maxItems": 20,
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "pids"
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/WorkResponse",
                  "example": [
                    {
                      "dcTitle": [
                        "Harry Potter og de vises sten"
                      ],
                      "collection": [
                        "300185-katalog:100562332",
                        "870970-basis:51989252",
                        "870971-forfweb:86203219",
                        "870970-basis:24284514",
                        "870970-basis:24284565",
                        "..."
                      ],
                      "dcSubjectDBCF": [
                        "fantasy",
                        "magi",
                        "troldmænd"
                      ],
                      "hasAdaption": [
                        "870970-basis:27123279",
                        "870970-basis:27963390"
                      ],
                      "coverUrlFull": [
                        "https://moreinfo.addi.dk/2.1/more_info_get.php?id=36565894&type=forside_500&key=55d553c259c9e46291a4"
                      ]
                    }
                  ]
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/status": {
      "post": {
        "tags": [
          "Status"
        ],
        "description": "Status endpoint printing current version of the open platform, as well as the version and status of various endpoints it depend upon.\n",
        "parameters": [
          {
            "name": "request",
            "description": "Request object",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "access_token"
              ],
              "properties": {
                "fields": {
                  "description": "which parts of the response to get",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "access_token": {
                  "type": "string",
                  "description": "Access token from the OAuth2 server",
                  "example": "qwerty"
                },
                "pretty": {
                  "description": "whether to prettyprint the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "timings": {
                  "description": "whether to include timings in the resulting json",
                  "type": "boolean",
                  "example": true
                },
                "after": {
                  "description": "last date / time for performance statistics, - defaults to now",
                  "type": "string",
                  "example": "2018-07-11T09:46:30.920Z"
                },
                "before": {
                  "description": "first date / time for performance statistics, - defaults to one minute before `after`. Performance statistics are typically kept 8 weeks.",
                  "type": "string",
                  "example": "2018-07-11T08:46:30.920Z"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/Status",
                  "example": {
                    "statusCode": 200,
                    "data": {
                      "version": "3.0.0",
                      "openagency": {
                        "url": "http://openagency.addi.dk/2.24/",
                        "ok": true
                      },
                      "openholdingstatus": {
                        "url": "https://openholdingstatus.addi.dk/2.2/",
                        "error": "ERROR checking for holdings DK-100450 on Kaninbjerget"
                      },
                      "openorder": {
                        "url": "https://openorder.addi.dk/test_2.8/",
                        "ok": true
                      },
                      "opensearch": {
                        "url": "https://opensearch.addi.dk/b3.5_4.5/",
                        "ok": true
                      },
                      "openuserstatus": {
                        "url": "https://openuserstatus.addi.dk/1.6.1/",
                        "ok": true
                      },
                      "moreinfo": {
                        "url": "https://moreinfo.addi.dk/2.10/",
                        "ok": true
                      }
                    }
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "get": {
        "tags": [
          "Status"
        ],
        "description": "Status endpoint printing current version of the open platform, as well as the version and status of various endpoints it depend upon.\n",
        "parameters": [
          {
            "description": "which parts of the response to get",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "name": "fields"
          },
          {
            "type": "string",
            "description": "Access token from the OAuth2 server",
            "in": "query",
            "required": true,
            "name": "access_token"
          },
          {
            "description": "whether to prettyprint the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "pretty"
          },
          {
            "description": "whether to include timings in the resulting json",
            "type": "boolean",
            "in": "query",
            "required": false,
            "name": "timings"
          },
          {
            "description": "last date / time for performance statistics, - defaults to now",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "after"
          },
          {
            "description": "first date / time for performance statistics, - defaults to one minute before `after`. Performance statistics are typically kept 8 weeks.",
            "type": "string",
            "in": "query",
            "required": false,
            "name": "before"
          }
        ],
        "responses": {
          "200": {
            "description": "Response envelope",
            "schema": {
              "title": "Response",
              "type": "object",
              "required": [
                "statusCode"
              ],
              "properties": {
                "statusCode": {
                  "type": "integer",
                  "default": 200
                },
                "data": {
                  "$ref": "#/definitions/Status",
                  "example": {
                    "statusCode": 200,
                    "data": {
                      "version": "3.0.0",
                      "openagency": {
                        "url": "http://openagency.addi.dk/2.24/",
                        "ok": true
                      },
                      "openholdingstatus": {
                        "url": "https://openholdingstatus.addi.dk/2.2/",
                        "error": "ERROR checking for holdings DK-100450 on Kaninbjerget"
                      },
                      "openorder": {
                        "url": "https://openorder.addi.dk/test_2.8/",
                        "ok": true
                      },
                      "opensearch": {
                        "url": "https://opensearch.addi.dk/b3.5_4.5/",
                        "ok": true
                      },
                      "openuserstatus": {
                        "url": "https://openuserstatus.addi.dk/1.6.1/",
                        "ok": true
                      },
                      "moreinfo": {
                        "url": "https://moreinfo.addi.dk/2.10/",
                        "ok": true
                      }
                    }
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "Error",
                    "type": "object",
                    "properties": {}
                  }
                },
                "timings": {
                  "title": "Timings",
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "string",
                      "description": "Total time for processing the request"
                    },
                    "external": {
                      "type": "string",
                      "description": "Time spent waiting for underlying services. The time used by the open platform itself is `total - external`"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/InvalidToken"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/comments/": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Comments",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Comments"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create Comment",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/commentPost"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Comment"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/comments/{id}": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "Comment in community",
        "parameters": [
          {
            "$ref": "#/parameters/comment_id"
          },
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/include"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Comment"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Update Comment",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/comment_id"
          },
          {
            "$ref": "#/parameters/commentPut"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Comment"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete Comment",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/comment_id"
          },
          {
            "$ref": "#/parameters/modified_by"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Comment"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/comments/{id}/likes": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Likes related to a specific Comment",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/comment_id"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Likes"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/comments/{id}/follows": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Followers related to a specific Comment",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/comment_id"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Follow"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/comments/{id}/flags": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Flags related to a specific Comment",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/comment_id"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Flag"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/flags/": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Flags",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Flags"
          },
          "500": {
            "$ref": "#/responses/Error"
          },
          "default": {
            "$ref": "#/responses/Flags"
          }
        }
      },
      "post": {
        "summary": "Create Flag",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "name": "flag",
            "in": "body",
            "description": "a flag object",
            "schema": {
              "$ref": "#/definitions/ActionPost"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Follow"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/flags/{id}": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "Get Flag",
        "description": "Get a flag by ID",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/flag_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Flag"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete Flag",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/flag_id"
          },
          {
            "$ref": "#/parameters/modified_by"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Flag"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/follows/": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Follows",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Follows"
          },
          "500": {
            "$ref": "#/responses/Error"
          },
          "default": {
            "$ref": "#/responses/Follows"
          }
        }
      },
      "post": {
        "summary": "Create Follow",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "name": "follow",
            "in": "body",
            "description": "a Follow object",
            "schema": {
              "$ref": "#/definitions/Follow"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Follow"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/follows/{id}": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "Get Follow",
        "description": "Get a Follow by ID",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Follow"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete Follow",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/follow_id"
          },
          {
            "$ref": "#/parameters/modified_by"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Follow"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/groups/": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Groups",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Groups"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create Group",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "name": "group",
            "in": "body",
            "description": "The Group content",
            "schema": {
              "$ref": "#/definitions/GroupPost"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Group"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/groups/{id}": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "Group in community",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/group_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Group"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Update Group",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/group_id"
          },
          {
            "$ref": "#/parameters/groupPut"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Group"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete Group",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/group_id"
          },
          {
            "$ref": "#/parameters/modified_by"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Group"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/groups/groupnameExists/{groupname}": {
      "get": {
        "summary": "Checks if the given groupname exists",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/groupname"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GroupnameExists"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/groups/{id}/posts": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Posts related to a specific Group",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Posts"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/groups/{id}/likes": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Likes related to a specific Group",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Likes"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/groups/{id}/follows": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Followers related to a specific Group",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Follow"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/groups/{id}/flags": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Flags related to a specific Group",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Flag"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/groups/{id}/fullview": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "Group view including Posts and Comments",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/postLimit"
          },
          {
            "$ref": "#/parameters/postOffset"
          },
          {
            "$ref": "#/parameters/commentLimit"
          },
          {
            "$ref": "#/parameters/commentOffset"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Group"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/likes/": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List Likes",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Likes"
          },
          "500": {
            "$ref": "#/responses/Error"
          },
          "default": {
            "$ref": "#/responses/Likes"
          }
        }
      },
      "post": {
        "summary": "Create Likes",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "name": "like",
            "in": "body",
            "description": "The Like objekt",
            "schema": {
              "$ref": "#/definitions/ActionPost"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Like"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/likes/{id}": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "Get Like",
        "description": "Get a like by ID",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/like_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Like"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete Like",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/like_id"
          },
          {
            "$ref": "#/parameters/modified_by"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Like"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/posts/": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Posts",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Posts"
          }
        }
      },
      "post": {
        "summary": "Create Post",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/postPost"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Post"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/posts/{id}": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "Post in community",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Post"
          }
        }
      },
      "put": {
        "summary": "Update Post",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/postPut"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Post"
          }
        }
      },
      "delete": {
        "summary": "Delete Post",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/modified_by"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Post"
          }
        }
      }
    },
    "/community/posts/{id}/comments": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Comments related to a specific Post",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Comments"
          }
        }
      }
    },
    "/community/posts/{id}/likes": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Likes related to a specific Post",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Likes"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/posts/{id}/follows": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Followers related to a specific Post",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Follow"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/posts/{id}/flags": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Flags related to a specific Post",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Flag"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/profiles/": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Profiles",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Profiles"
          },
          "500": {
            "$ref": "#/responses/Error"
          },
          "default": {
            "$ref": "#/responses/Profiles"
          }
        }
      },
      "post": {
        "summary": "Create Profile",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "name": "profile",
            "in": "body",
            "description": "The profile",
            "schema": {
              "$ref": "#/definitions/ProfilePost"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Profile"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/profiles/{profile_id}": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "Profile in community",
        "description": "Get A profile by ID",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/profile_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Profile"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Update Profile",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/profile_id"
          },
          {
            "$ref": "#/parameters/profilePost"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Profile"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete Profile",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/profile_id"
          },
          {
            "$ref": "#/parameters/modified_by"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Profile"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/profiles/{profile_id}/activity": {
      "get": {
        "summary": "Activityfeed for a specific Profile",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/profile_id"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Activity"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/profiles/usernameExists/{username}": {
      "get": {
        "summary": "Checks if a given username exists",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UsernameExists"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/profiles/{profile_id}/likes": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Likes related to a specific Profile",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/profile_id"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Likes"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/profiles/{profile_id}/isFollowingGroup/{id}": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "Checks if the profile given by the profile_id is following the group given by group_id",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/profile_id"
          },
          {
            "$ref": "#/parameters/group_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserIsFollowingGroup"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/profiles/{profile_id}/follows": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Followers related to a specific Profile",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/profile_id"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Follows"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/profiles/{profile_id}/flags": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Flags related to a specific Profile",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/profile_id"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Flags"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/profiles/{profile_id}/quarantines": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Quarantines related to a specific Profile",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/profile_id"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Quarantines"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/quarantine/": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Quarantines",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Quarantines"
          }
        }
      },
      "post": {
        "summary": "Create Quarantine",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "name": "quarantine",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/QuarantinePost"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Quarantine"
          }
        }
      }
    },
    "/community/quarantine/{id}": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "Quarantine in community",
        "description": "Get a Quarantine by ID",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/quarantine_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Quarantine"
          }
        }
      },
      "put": {
        "summary": "Update a Quarantine",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/quarantine_id"
          },
          {
            "$ref": "#/parameters/quarantinePut"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Quarantine"
          }
        }
      },
      "delete": {
        "summary": "Delete a Quarantine",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/quarantine_id"
          },
          {
            "$ref": "#/parameters/modified_by"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Quarantine"
          }
        }
      }
    },
    "/community/reviews/": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Reviews",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Reviews"
          },
          "500": {
            "$ref": "#/responses/Error"
          },
          "default": {
            "$ref": "#/responses/Reviews"
          }
        }
      },
      "post": {
        "summary": "Create Review",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "name": "review",
            "in": "body",
            "description": "The review",
            "schema": {
              "$ref": "#/definitions/ReviewPost"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Review"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/reviews/{id}": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "Review in community",
        "description": "Get a review by ID",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/review_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Review"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Update a Review",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/review_id"
          },
          {
            "$ref": "#/parameters/reviewPut"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Review"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete a Review",
        "tags": [
          "Community"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/review_id"
          },
          {
            "$ref": "#/parameters/modified_by"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Review"
          },
          "default": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/reviews/{id}/likes": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Likes related to a specific Review",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/review_id"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Likes"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/community/reviews/{id}/flags": {
      "get": {
        "tags": [
          "Community"
        ],
        "summary": "List of Flags related to a specific Review",
        "parameters": [
          {
            "$ref": "#/parameters/accessToken"
          },
          {
            "$ref": "#/parameters/review_id"
          },
          {
            "$ref": "#/parameters/include"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/counts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Flags"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    }
  },
  "definitions": {
    "Profile": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "created_epoch": {
          "type": "integer",
          "readOnly": true
        },
        "modified_epoch": {
          "type": "integer",
          "readOnly": true
        },
        "modified_by": {
          "type": "integer"
        },
        "deleted_epoch": {
          "type": "integer",
          "readOnly": true
        },
        "birthday": {
          "type": "string",
          "format": "date"
        },
        "fullName": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "readOnly": true
        }
      },
      "required": [
        "username"
      ],
      "additionalProperties": false
    },
    "ProfilePost": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "birthday": {
          "type": "string",
          "format": "date"
        },
        "fullName": {
          "type": "string"
        }
      },
      "required": [
        "username"
      ]
    },
    "ProfilePut": {
      "type": "object",
      "properties": {
        "modified_by": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "birthday": {
          "type": "string",
          "format": "date"
        },
        "fullName": {
          "type": "string"
        }
      },
      "required": [
        "modified_by"
      ]
    },
    "Profiles": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Profile"
      }
    },
    "Activity": {
      "allOf": [
        {
          "$ref": "#/definitions/Profile"
        },
        {
          "properties": {
            "activity": {
              "type": "object",
              "properties": {
                "likes": {
                  "type": "object",
                  "properties": {
                    "Total": {
                      "type": "integer"
                    },
                    "NextOffset": {
                      "type": "integer"
                    },
                    "List": {
                      "type": "array",
                      "items": [
                        {
                          "$ref": "#/definitions/Like"
                        }
                      ]
                    }
                  }
                },
                "follows": {
                  "type": "object",
                  "properties": {
                    "Total": {
                      "type": "integer"
                    },
                    "NextOffset": {
                      "type": "integer"
                    },
                    "List": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Follow"
                      }
                    }
                  }
                },
                "flags": {
                  "type": "object",
                  "properties": {
                    "Total": {
                      "type": "integer"
                    },
                    "NextOffset": {
                      "type": "integer"
                    },
                    "List": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Flag"
                      }
                    }
                  }
                },
                "groups": {
                  "type": "object",
                  "properties": {
                    "Total": {
                      "type": "integer"
                    },
                    "NextOffset": {
                      "type": "integer"
                    },
                    "List": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Group"
                      }
                    }
                  }
                },
                "posts": {
                  "type": "object",
                  "properties": {
                    "Total": {
                      "type": "integer"
                    },
                    "NextOffset": {
                      "type": "integer"
                    },
                    "List": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Post"
                      }
                    }
                  }
                },
                "comments": {
                  "type": "object",
                  "properties": {
                    "Total": {
                      "type": "integer"
                    },
                    "NextOffset": {
                      "type": "integer"
                    },
                    "List": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Comment"
                      }
                    }
                  }
                },
                "reviews": {
                  "type": "object",
                  "properties": {
                    "Total": {
                      "type": "integer"
                    },
                    "NextOffset": {
                      "type": "integer"
                    },
                    "List": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Review"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    "UserIsFollowingGroup": {
      "properties": {
        "id": {
          "type": "integer"
        }
      }
    },
    "UsernameExists": {
      "properties": {
        "id": {
          "type": "integer"
        }
      }
    },
    "Group": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        }
      ],
      "properties": {
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        }
      }
    },
    "GroupPost": {
      "properties": {
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "profile_id": {
          "$ref": "#/parameters/profile_id"
        },
        "media": {
          "$ref": "#/definitions/Media"
        }
      },
      "required": [
        "title",
        "body",
        "profile_id"
      ]
    },
    "GroupPut": {
      "properties": {
        "modified_by": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "media": {
          "$ref": "#/definitions/Media"
        }
      },
      "required": [
        "modified_by"
      ]
    },
    "Groups": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Group"
      }
    },
    "GroupnameExists": {
      "properties": {
        "id": {
          "type": "integer"
        }
      }
    },
    "Post": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        }
      ],
      "properties": {
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "group_id": {
          "type": "integer"
        }
      }
    },
    "PostPost": {
      "properties": {
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "group_id": {
          "type": "integer"
        },
        "profile_id": {
          "$ref": "#/parameters/profile_id"
        },
        "media": {
          "$ref": "#/definitions/Media"
        }
      },
      "required": [
        "title",
        "body",
        "group_id",
        "profile_id"
      ]
    },
    "PostPut": {
      "properties": {
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "modified_by": {
          "type": "integer"
        },
        "media": {
          "$ref": "#/definitions/Media"
        }
      },
      "required": [
        "modified_by"
      ]
    },
    "Review": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        }
      ],
      "properties": {
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "rating": {
          "type": "integer"
        },
        "reference": {
          "$ref": "#/definitions/Reference"
        }
      }
    },
    "ReviewPost": {
      "properties": {
        "profile_id": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "rating": {
          "type": "integer"
        },
        "reference": {
          "$ref": "#/definitions/Reference"
        }
      },
      "required": [
        "profile_id"
      ]
    },
    "ReviewPut": {
      "properties": {
        "modified_by": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "rating": {
          "type": "integer"
        },
        "reference": {
          "$ref": "#/definitions/Reference"
        }
      },
      "required": [
        "modified_by"
      ]
    },
    "Reviews": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Review"
      }
    },
    "Comment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        }
      ],
      "properties": {
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "post_id": {
          "type": "integer"
        }
      },
      "additionalProperties": true,
      "required": [
        "body",
        "title",
        "post_id"
      ]
    },
    "CommentPost": {
      "properties": {
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "post_id": {
          "type": "integer"
        },
        "profile_id": {
          "$ref": "#/parameters/profile_id"
        }
      },
      "required": [
        "body",
        "title",
        "post_id"
      ]
    },
    "CommentPut": {
      "properties": {
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "modifed_by": {
          "type": "integer"
        }
      },
      "required": [
        "body",
        "title",
        "modifed_by"
      ]
    },
    "Quarantine": {
      "allOf": [
        {
          "$ref": "#/definitions/Base"
        }
      ],
      "properties": {
        "profile_id": {
          "type": "integer"
        },
        "profile_ref": {
          "type": "integer"
        },
        "reason": {
          "type": "string"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "QuarantinePost": {
      "properties": {
        "profile_id": {
          "type": "integer"
        },
        "profile_ref": {
          "type": "integer"
        },
        "reason": {
          "type": "string"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "required": [
        "profile_id",
        "profile_ref",
        "reason"
      ]
    },
    "QuarantinePut": {
      "properties": {
        "modified_by": {
          "type": "integer"
        },
        "profile_id": {
          "type": "integer"
        },
        "profile_ref": {
          "type": "integer"
        },
        "reason": {
          "type": "string"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "required": [
        "modified_by"
      ]
    },
    "Quarantines": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Quarantine"
      }
    },
    "Like": {
      "allOf": [
        {
          "$ref": "#/definitions/Action"
        }
      ]
    },
    "Likes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Like"
      }
    },
    "Follow": {
      "allOf": [
        {
          "$ref": "#/definitions/ActionPost"
        }
      ]
    },
    "Follows": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Follow"
      }
    },
    "Flag": {
      "allOf": [
        {
          "$ref": "#/definitions/Action"
        }
      ],
      "properties": {
        "reason": {
          "type": "string"
        }
      }
    },
    "Flags": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Flags"
      }
    },
    "Posts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Post"
      }
    },
    "Comments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Comment"
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "statusCode": {
          "type": "integer"
        },
        "error": {
          "type": "string"
        }
      },
      "example": {
        "statusCode": 500,
        "error": "some unexpected error occured"
      }
    },
    "InvalidToken": {
      "type": "object",
      "properties": {
        "statusCode": {
          "type": "integer"
        },
        "error": {
          "type": "string"
        },
        "error_description": {
          "type": "string"
        }
      },
      "example": {
        "statusCode": 401,
        "error": "invalid_token",
        "error_description": "The access token expired"
      }
    },
    "InvalidUser": {
      "type": "object",
      "properties": {
        "statusCode": {
          "type": "integer"
        },
        "error": {
          "type": "string"
        }
      },
      "example": {
        "statusCode": 300,
        "error": "not logged in"
      }
    },
    "Entity": {
      "allOf": [
        {
          "$ref": "#/definitions/Base"
        }
      ],
      "properties": {
        "media": {
          "$ref": "#/definitions/Media"
        },
        "profile_id": {
          "type": "number",
          "format": "integer"
        }
      },
      "additionalProperties": true
    },
    "Action": {
      "allOf": [
        {
          "$ref": "#/definitions/Base"
        }
      ],
      "properties": {
        "reference": {
          "$ref": "#/definitions/Reference"
        },
        "profile_id": {
          "type": "number",
          "format": "integer"
        }
      }
    },
    "ActionPost": {
      "properties": {
        "reference": {
          "$ref": "#/definitions/Reference"
        },
        "profile_id": {
          "type": "number",
          "format": "integer"
        }
      }
    },
    "Reference": {
      "type": "object",
      "required": [
        "type",
        "id"
      ],
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        }
      }
    },
    "Media": {
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      },
      "required": [
        "type",
        "value"
      ]
    },
    "Base": {
      "discriminator": "base",
      "type": "object",
      "properties": {
        "created_epoch": {
          "type": "integer"
        },
        "deleted_epoch": {
          "type": "integer"
        },
        "modified_epoch": {
          "type": "integer"
        },
        "modified_by": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        }
      },
      "additionalProperties": true
    },
    "AvailabilityResponse": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Availability"
      }
    },
    "Availability": {
      "type": "object",
      "properties": {
        "expectedDelivery": {
          "description": "Date when the the material would be available, if applicable",
          "type": "string"
        },
        "willLend": {
          "description": "Whether it is possible to loan the material",
          "type": "boolean"
        },
        "orderPossible": {
          "description": "Whether it is possible to order the material",
          "type": "boolean"
        },
        "unavailable": {
          "description": "Description of reason, if availability is unavailable, i.e. for nonexistant material, or material not for logged in library.",
          "type": "string"
        },
        "holdings": {
          "description": "Local holding status at branch level (for FBS-libraries). Only show branches for the currently logged in agency. The structure of the holdings result follows the FBS-API-specifications which can be downloaded from <http://fbsudrulning.dk/vejledninger/#/Ops%C3%A6tning?id=44>",
          "type": "array"
        }
      }
    },
    "EventsResponse": {
      "type": "array",
      "items": [
        {
          "$ref": "#/definitions/Event"
        }
      ]
    },
    "Event": {
      "type": "object",
      "properties": {
        "author": {
          "$ref": "#/definitions/EventField"
        },
        "changed": {
          "$ref": "#/definitions/EventField"
        },
        "created": {
          "$ref": "#/definitions/EventField"
        },
        "ding_event_groups_ref": {
          "$ref": "#/definitions/EventField"
        },
        "field_ding_event_body": {
          "$ref": "#/definitions/EventField"
        },
        "field_ding_event_date": {
          "$ref": "#/definitions/EventField"
        },
        "field_ding_event_lead": {
          "$ref": "#/definitions/EventField"
        },
        "field_ding_event_list_image": {
          "$ref": "#/definitions/EventField"
        },
        "field_ding_event_location__country": {
          "$ref": "#/definitions/EventField"
        },
        "field_ding_event_location__first_name": {
          "$ref": "#/definitions/EventField"
        },
        "field_ding_event_location__last_name": {
          "$ref": "#/definitions/EventField"
        },
        "field_ding_event_location__locality": {
          "$ref": "#/definitions/EventField"
        },
        "field_ding_event_location__name_line": {
          "$ref": "#/definitions/EventField"
        },
        "field_ding_event_location__postal_code": {
          "$ref": "#/definitions/EventField"
        },
        "field_ding_event_location__premise": {
          "$ref": "#/definitions/EventField"
        },
        "field_ding_event_location__thoroughfare": {
          "$ref": "#/definitions/EventField"
        },
        "field_ding_event_materials": {
          "$ref": "#/definitions/EventField"
        },
        "field_ding_event_price": {
          "$ref": "#/definitions/EventField"
        },
        "field_ding_event_tags": {
          "$ref": "#/definitions/EventField"
        },
        "field_ding_event_title_image": {
          "$ref": "#/definitions/EventField"
        },
        "nid": {
          "type": "integer"
        },
        "og_group_ref": {
          "$ref": "#/definitions/EventField"
        },
        "status": {
          "$ref": "#/definitions/EventField"
        },
        "title": {
          "$ref": "#/definitions/EventField"
        }
      }
    },
    "EventField": {
      "type": "object",
      "properties": {
        "attr": {
          "type": "array",
          "items": {}
        },
        "name": {
          "type": "string"
        },
        "value": {}
      }
    },
    "FacetsResults": {
      "type": "object",
      "properties": {
        "access": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "acSource": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "audience": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "audienceCategory": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "branch": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "category": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "creator": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "creatorFunction": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "date": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "department": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "dk5": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "extraTitles": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "fictionSubject": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "form": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "gamePlatform": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "genre": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "genreCategory": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "geographic": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "language": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "level": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "let": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "literaryForm": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "lix": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "musicSubject": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "nationality": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "nonFictionSubject": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "partOf": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "period": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "primaryCreator": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "sheetMusic": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "subject": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "titleSeries": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        },
        "type": {
          "$ref": "#/definitions/FacetsResultsWrapper"
        }
      }
    },
    "FacetsResultsWrapper": {
      "type": "array",
      "items": [
        {
          "$ref": "#/definitions/FacetsResult"
        }
      ]
    },
    "FacetsResult": {
      "type": "object",
      "properties": {
        "term": {
          "type": "string"
        },
        "frequency": {
          "type": "number",
          "format": "integer"
        }
      }
    },
    "LibrariesResponse": {
      "type": "array",
      "items": [
        {
          "$ref": "#/definitions/Libraries"
        }
      ]
    },
    "Libraries": {
      "type": "object",
      "properties": {
        "agencyName": {
          "type": "string"
        },
        "agencyId": {
          "type": "string"
        },
        "agencyType": {
          "type": "string"
        },
        "branchId": {
          "type": "string"
        },
        "branchType": {
          "description": "Type of branch, one of: H(Hovedbibliotek), f(filial), b(bogbus), P(privatbibliotek/skolebibliotek/udenlandsk bibliotek), D(DanBib-licens bibliotek), x(anden type)",
          "type": "string"
        },
        "branchName": {
          "description": "Branch name, first is in danish, second is in english.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "branchShortName": {
          "description": "Short branch name, first is in danish, second is in english.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "branchPhone": {},
        "branchEmail": {},
        "branchIsAgency": {
          "description": "Whether the branch also an agency, \"0\" means false, \"1\" means true.",
          "type": "string"
        },
        "postalAddress": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "openingHours": {
          "description": "Opening hours, first is in danish, second is in english.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "temporarilyClosed": {
          "description": "Whether the branch is temporarily closed, \"0\" means false, \"1\" means true.",
          "type": "string"
        },
        "illOrderReceiptText": {
          "description": "Order receipt text, first is in danish, second is in english.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pickupAllowed": {
          "description": "Indicator whether materials can be picked up at the given branch/agency. \"0\" means false, \"1\" means true.",
          "type": "string"
        },
        "lastUpdated": {
          "type": "string"
        },
        "isOclcRsLibrary": {
          "description": "\"0\" means false, \"1\" means true.",
          "type": "string"
        },
        "stateAndUniversityLibraryCopyService": {
          "description": "\"0\" means false, \"1\" means true.",
          "type": "string"
        },
        "orderParameters": {
          "description": "List of parameters that should be passed to order, when ordering to this branch.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "agencyEmail": {
          "type": "string"
        },
        "lookupUrl": {
          "type": "string"
        },
        "branchWebsiteUrl": {
          "type": "string"
        },
        "librarydkSupportEmail": {
          "type": "string"
        },
        "librarydkSupportPhone": {
          "type": "string"
        },
        "temporarilyClosedReason": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "branchCatalogueUrl": {
          "type": "string"
        },
        "userStatusUrl": {
          "type": "string"
        },
        "agencyPhone": {
          "type": "string"
        },
        "agencyCvrNumber": {
          "type": "string"
        },
        "agencyPNumber": {
          "type": "string"
        },
        "isil": {
          "type": "string"
        },
        "registrationFormUrl": {
          "type": "string"
        },
        "registrationFormUrlText": {
          "type": "string"
        },
        "dropOffBranch": {
          "type": "string"
        },
        "dropOffName": {
          "type": "string"
        },
        "geolocation": {
          "properties": {
            "latitude": {
              "type": "string"
            },
            "longitude": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "agencyFax": {
          "type": "string"
        },
        "agencyEanNumber": {
          "type": "string"
        },
        "branchPNumber": {
          "type": "string"
        },
        "serviceDeclarationUrl": {
          "type": "string"
        },
        "paymentUrl": {
          "type": "string"
        },
        "agencySubdivision": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "LibraryResponse": {
      "type": "array",
      "items": [
        {
          "$ref": "#/definitions/Library"
        }
      ]
    },
    "Library": {
      "properties": {
        "author": {
          "$ref": "#/definitions/Field"
        },
        "changed": {
          "$ref": "#/definitions/Field"
        },
        "created": {
          "$ref": "#/definitions/Field"
        },
        "field_ding_library_addresse__country": {
          "$ref": "#/definitions/Field"
        },
        "field_ding_library_addresse__locality": {
          "$ref": "#/definitions/Field"
        },
        "field_ding_library_addresse__postal_code": {
          "$ref": "#/definitions/Field"
        },
        "field_ding_library_addresse__premise": {
          "$ref": "#/definitions/Field"
        },
        "field_ding_library_addresse__thoroughfare": {
          "$ref": "#/definitions/Field"
        },
        "field_ding_library_body": {
          "$ref": "#/definitions/Field"
        },
        "field_ding_library_fax_number": {
          "$ref": "#/definitions/Field"
        },
        "field_ding_library_lead": {
          "$ref": "#/definitions/Field"
        },
        "field_ding_library_list_image": {
          "$ref": "#/definitions/Field"
        },
        "field_ding_library_mail": {
          "$ref": "#/definitions/Field"
        },
        "field_ding_library_phone_number": {
          "$ref": "#/definitions/Field"
        },
        "field_ding_library_slug": {
          "$ref": "#/definitions/Field"
        },
        "field_ding_library_title_image": {
          "$ref": "#/definitions/Field"
        },
        "nid": {
          "type": "integer"
        },
        "opening_hours": {
          "$ref": "#/definitions/OpeningHours"
        },
        "status": {
          "$ref": "#/definitions/Field"
        },
        "title": {
          "$ref": "#/definitions/Field"
        }
      }
    },
    "Field": {
      "type": "object",
      "properties": {
        "attr": {
          "type": "array",
          "items": {}
        },
        "name": {
          "type": "string"
        },
        "value": {}
      }
    },
    "OpeningHours": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "category_tid": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "customised": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "date": {
            "type": "string"
          },
          "end_time": {
            "type": "string"
          },
          "instance_id": {
            "type": "string"
          },
          "nid": {
            "type": "string"
          },
          "notice": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "original_instance_id": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "repeat_end_date": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "repeat_rule": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "start_time": {
            "type": "string"
          }
        }
      }
    },
    "NewsResponse": {
      "type": "array",
      "items": [
        {
          "$ref": "#/definitions/News"
        }
      ]
    },
    "News": {
      "properties": {
        "author": {
          "$ref": "#/definitions/NewsField"
        },
        "changed": {
          "$ref": "#/definitions/NewsField"
        },
        "created": {
          "$ref": "#/definitions/NewsField"
        },
        "ding_news_groups_ref": {
          "$ref": "#/definitions/NewsField"
        },
        "field_ding_news_body": {
          "$ref": "#/definitions/NewsField"
        },
        "field_ding_news_lead": {
          "$ref": "#/definitions/NewsField"
        },
        "field_ding_news_list_image": {
          "$ref": "#/definitions/NewsField"
        },
        "field_ding_news_materials": {
          "$ref": "#/definitions/NewsField"
        },
        "field_ding_news_tags": {
          "$ref": "#/definitions/NewsField"
        },
        "field_ding_news_title_image": {
          "$ref": "#/definitions/NewsField"
        },
        "nid": {
          "type": "integer"
        },
        "og_group_ref": {
          "$ref": "#/definitions/NewsField"
        },
        "status": {
          "$ref": "#/definitions/NewsField"
        },
        "title": {
          "$ref": "#/definitions/NewsField"
        }
      }
    },
    "NewsField": {
      "type": "object",
      "properties": {
        "attr": {
          "type": "array",
          "items": {}
        },
        "name": {
          "type": "string"
        },
        "value": {}
      }
    },
    "OrderResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "orderId": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "orsId": {
          "type": "string"
        }
      }
    },
    "RecommendationResponse": {
      "type": "array",
      "items": [
        {
          "$ref": "#/definitions/Recommendation"
        }
      ]
    },
    "Recommendation": {
      "type": "object",
      "properties": {
        "pid": {
          "description": "pid in recommended work with highest loancount",
          "type": "string"
        },
        "val": {
          "description": "Similarity value",
          "type": "number"
        },
        "from": {
          "description": "recommendations based in this item",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RenewResponse": {
      "$ref": "#/definitions/Renew"
    },
    "Renew": {
      "type": "object",
      "properties": {
        "loanId": {
          "type": "string"
        },
        "returnDate": {
          "type": "string"
        }
      }
    },
    "Status": {
      "type": "object",
      "properties": {
        "version": {
          "description": "version of open platform",
          "type": "string"
        },
        "endOfServiceDate": {
          "description": "when this version of openplatform will be deprecated",
          "type": "string"
        },
        "openagency": {
          "description": "status for openagency",
          "$ref": "#/definitions/EndpointStatus"
        },
        "openholdingstatus": {
          "description": "status for openholdingstatus",
          "$ref": "#/definitions/EndpointStatus"
        },
        "openorder": {
          "description": "status for openorder",
          "$ref": "#/definitions/EndpointStatus"
        },
        "opensearch": {
          "description": "status for opensearch",
          "$ref": "#/definitions/EndpointStatus"
        },
        "openuserstatus": {
          "description": "status for openuserstatus",
          "$ref": "#/definitions/EndpointStatus"
        },
        "moreinfo": {
          "description": "status for moreinfo",
          "$ref": "#/definitions/EndpointStatus"
        },
        "ddbcmsapi": {
          "description": "status for cmscontent",
          "$ref": "#/definitions/EndpointStatus"
        },
        "recommend": {
          "description": "status for recommender",
          "$ref": "#/definitions/EndpointStatus"
        },
        "suggest": {
          "description": "status for suggest",
          "$ref": "#/definitions/EndpointStatus"
        },
        "performance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerformanceStatus"
          }
        }
      }
    },
    "EndpointStatus": {
      "type": "object",
      "properties": {
        "url": {
          "description": "url/version for the underlying service",
          "type": "string"
        },
        "ok": {
          "description": "whether the underlying service is ok",
          "type": "boolean"
        },
        "error": {
          "description": "details about issues, if underlying service is not ok",
          "type": "string"
        }
      }
    },
    "PerformanceStatus": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "Which endpoint the performnace statistics is about."
        },
        "version": {
          "type": "string",
          "description": "Which version of the open platform the performance statistics is about."
        },
        "count": {
          "type": "integer",
          "description": "Number of requests handled during the week."
        },
        "underlyingServices": {
          "description": "Time used by underlying services.",
          "$ref": "#/definitions/PerformanceQuantile"
        },
        "total": {
          "description": "Total time taken by the request (underlying service + time taken by the open platform).",
          "$ref": "#/definitions/PerformanceQuantile"
        }
      }
    },
    "PerformanceQuantile": {
      "type": "object",
      "properties": {
        "1.0": {
          "type": "integer",
          "description": "time taken in milliseconds at the 1 percentile fastest request"
        },
        "5.0": {
          "type": "integer",
          "description": "time taken in milliseconds at the 5 percentile fastest request"
        },
        "25.0": {
          "type": "integer",
          "description": "time taken in milliseconds at the fastest quartile"
        },
        "50.0": {
          "type": "integer",
          "description": "time taken in milliseconds at the median request"
        },
        "75.0": {
          "type": "integer",
          "description": "time taken in milliseconds at the slowest quartile"
        },
        "95.0": {
          "type": "integer",
          "description": "time taken in milliseconds at the 5 percentile slowest request"
        },
        "99.0": {
          "type": "integer",
          "description": "time taken in milliseconds at the 1 percentile slowest request"
        }
      }
    },
    "SuggestResponse": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Suggestion"
      }
    },
    "Suggestion": {
      "type": "object",
      "properties": {
        "term": {
          "description": "the suggestion",
          "type": "string"
        },
        "val": {
          "description": "weight of the suggestion",
          "type": "string"
        },
        "type": {
          "description": "Where the suggestion comes from, i.e. `title`, `creator` og `subject`",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "agency": {
          "type": "string"
        },
        "debt": {
          "$ref": "#/definitions/Debt"
        },
        "loans": {
          "$ref": "#/definitions/Loans"
        },
        "orders": {
          "$ref": "#/definitions/Orders"
        }
      }
    },
    "Debt": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "creator": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      }
    },
    "Loans": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "creator": {
            "type": "string"
          },
          "dueDate": {
            "type": "string"
          },
          "loanId": {
            "type": "string"
          },
          "materialId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "titleId": {
            "type": "string"
          }
        }
      }
    },
    "Orders": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "creator": {
            "type": "string"
          },
          "holdQueuePosition": {
            "type": "string"
          },
          "orderDate": {
            "type": "string"
          },
          "orderId": {
            "type": "string"
          },
          "orderType": {
            "type": "string"
          },
          "pickUpAgency": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      }
    },
    "WorkResponse": {
      "type": "array",
      "items": [
        {
          "$ref": "#/definitions/Work"
        }
      ]
    },
    "Work": {
      "type": "object",
      "properties": {
        "abstract": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "accessType": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "activity": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "alternative": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "audienceAge": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "audience": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "audienceMedieraad": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "audiencePegi": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "collection": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "collectionDetails": {
          "$ref": "#/definitions/CollectionDetails"
        },
        "continuedIn": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "continues": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorAct": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorAft": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorAnm": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorAnt": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorArc": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorArr": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorArt": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorAud": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorAui": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorAus": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorAut": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorCcp": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorChr": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorClb": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorCli": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorCll": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorCmm": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorCmp": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorCnd": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorCng": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorCom": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorCre": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorCtb": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorCtg": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorCur": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorCwt": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorDkani": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorDkbea": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorDkdes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorDkfig": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorDkfvl": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorDkind": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorDkmdt": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorDkmed": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorDkmon": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorDkops": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorDkref": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorDkste": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorDktek": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorDktil": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorDkved": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorDrm": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorDte": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorEdt": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorFmo": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorHnr": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributor": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorIll": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorInv": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorIsb": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorItr": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorIve": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorIvr": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorLbt": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorLtg": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorLyr": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorMus": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorNrt": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorOrm": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorOth": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorPbl": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorPht": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorPrd": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorPrf": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorPro": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorPROVIDERID": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorPrt": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorRce": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorRes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorRev": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorScl": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorSds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorSng": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorSpk": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorStl": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorTrl": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributorWdc": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "coverDataUrl117": {
          "description": "coverUrl117 as a data url, useful for apps that also wants to work offline.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "coverDataUrl207": {
          "description": "coverUrl207 as a data url, useful for apps that also wants to work offline.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "coverDataUrl42": {
          "description": "coverUrl42 as a data url, useful for apps that also wants to work offline.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "coverDataUrl500": {
          "description": "coverUrl500 as a data url, useful for apps that also wants to work offline.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "coverDataUrlBack": {
          "description": "coverUrlBack as a data url, useful for apps that also wants to work offline.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "coverDataUrlFull": {
          "description": "coverUrlFull as a data url, useful for apps that also wants to work offline.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "coverDataUrlThumbnail": {
          "description": "coverUrlThumbnail as a data url, useful for apps that also wants to work offline.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "coverUrl117": {
          "description": "Url for a cover image with a height of 117 pixels. Notice this is a temporary url, that will work for 24 hours.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "maxItems": 1
        },
        "coverUrl207": {
          "description": "Url for a cover image with a height of 207 pixels. Notice this is a temporary url, that will work for 24 hours.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "maxItems": 1
        },
        "coverUrl42": {
          "description": "Url for a cover image with a height of 42 pixels. Notice this is a temporary url, that will work for 24 hours.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "maxItems": 1
        },
        "coverUrl500": {
          "description": "Url for a cover image with a height of 500 pixels. Notice this is a temporary url, that will work for 24 hours.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "maxItems": 1
        },
        "coverUrlBack": {
          "description": "Url for a back image of the material. Notice this is a temporary url, that will work for 24 hours.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "maxItems": 1
        },
        "coverUrlFull": {
          "description": "Url for a large cover image. Notice this is a temporary url, that will work for 24 hours.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "maxItems": 1
        },
        "coverUrlThumbnail": {
          "description": "Url for a small cover image. Notice this is a temporary url, that will work for 24 hours.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorActPeriod": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorAnt": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorArr": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorArt": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorAus": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorAut": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorCcp": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorCmp": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorCom": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorCre": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorDkbea": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorDkbra": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorDkbrm": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorDkdes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorDkmed": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorDkmon": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorDkops": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorDkved": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorDrm": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorDrt": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorEdt": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creator": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dcCreator": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorIll": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorIve": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorIvr": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorLyr": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorMus": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorOth": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorPht": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorPROVIDERID": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorScl": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorSng": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorSort": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorTrl": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorWdc": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "date": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[0-9]{4}$",
            "example": 2017
          }
        },
        "description": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "descriptionSeries": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "discussedIn": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "discusses": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "extent": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fedoraPid": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "format": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hasAdaptation": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hasAnalysis": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hasCreatorDescription": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hasDescriptionFromPublisher": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hasManuscript": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hasOnlineAccess": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hasPart": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hasPartTrack": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hasReview": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hasSoundtrack": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "acIdentifier": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pid": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identifier": {
          "description": "`identifier` as specified in [Dublin Core](http://dublincore.org/documents/dces/)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identifierISBN": {
          "description": "`identifier` as specified in [Dublin Core](http://dublincore.org/documents/dces/) as ISBN(International Standard Book Number)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identifierISMN": {
          "description": "`identifier` as specified in [Dublin Core](http://dublincore.org/documents/dces/) as ISMN(International Standard Music Number)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identifierISRC": {
          "description": "`identifier` as specified in [Dublin Core](http://dublincore.org/documents/dces/) as ISRC(International Standard Recording Code)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identifierISSN": {
          "description": "`identifier` as specified in [Dublin Core](http://dublincore.org/documents/dces/) as ISSN(International Standard Serial Number)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identifierPROVIDERID": {
          "description": "`identifier` as specified in [Dublin Core](http://dublincore.org/documents/dces/)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identifierPROVIDERMID": {
          "description": "`identifier` as specified in [Dublin Core](http://dublincore.org/documents/dces/)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identifierUPC": {
          "description": "`identifier` as specified in [Dublin Core](http://dublincore.org/documents/dces/) as UPC(Universal Product Code)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identifierURI": {
          "description": "`identifier` as specified in [Dublin Core](http://dublincore.org/documents/dces/) as URI(Uniform Resource Identifier)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isAdaptationOf": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isAnalysisOf": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isDescriptionFromPublisherOf": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isManuscriptOf": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isPartOfAlbumId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isPartOfAlbumTitle": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isPartOf": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isPartOfISBN": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isPartOfISSN": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isPartOfManifestation": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isReplacedBy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isReviewOf": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isSoundtrackOfGame": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isSoundtrackOfMovie": {
          "description": "see http://www.danbib.dk/broend3_relationer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "language": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dcLanguage": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "languageISO6392": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "languageSpoken": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "languageSubtitles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "multiVolumeType": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "partOf": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publisher": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "referencesISBN": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "replaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rights": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "shelfMusicshelf": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "acSource": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "source": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "spatialCoordinates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "spatialDBCF": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "spatialDBCM": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "spatialDBCS": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "spatial": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjectDBCF": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjectDBCM": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjectDBCN": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjectDBCO": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjectDBCS": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjectDK5": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjectDK5Text": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjectGenre": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subject": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjectLCSH": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjectSort": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "temporalDBCM": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "temporalDBCP": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "temporal": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "titleFull": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dcTitleFull": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dcTitle": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "titleSeries": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "typeBibDKType": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "workType": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "CollectionDetails": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/CollectionDetail"
      }
    },
    "CollectionDetail": {
      "type": "object",
      "properties": {
        "accessType": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pid": {
          "type": "array",
          "minItems": 1,
          "maxItems": 1,
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "titleFull": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "workType": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "parameters": {
    "accessToken": {
      "name": "access_token",
      "in": "query",
      "description": "Access token from the OAuth2 server",
      "type": "string",
      "required": true
    },
    "limit": {
      "name": "limit",
      "in": "query",
      "description": "Number of elements to return",
      "default": 10,
      "type": "integer"
    },
    "offset": {
      "name": "offset",
      "in": "query",
      "description": "Offset value",
      "default": 0,
      "type": "integer"
    },
    "include": {
      "name": "include",
      "in": "query",
      "description": "Include related objects. Json formatted object with type, limit, offset and count (Total number of elements) e.g. {type: post, limit: 10, offset: 0, count: 1}",
      "type": "string"
    },
    "counts": {
      "name": "counts",
      "in": "query",
      "description": "Include count of named related objects e.g. counts=[\"flags\", \"likes\"]",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "postLimit": {
      "name": "postLimit",
      "in": "query",
      "description": "limit of posts to include",
      "type": "integer"
    },
    "postOffset": {
      "name": "postOffset",
      "in": "query",
      "description": "Offset of included posts",
      "type": "integer"
    },
    "commentLimit": {
      "name": "commentLimit",
      "in": "query",
      "description": "limit of comments to include",
      "type": "integer"
    },
    "commentOffset": {
      "name": "commentOffset",
      "in": "query",
      "description": "Offset of included comments",
      "type": "integer"
    },
    "id": {
      "name": "id",
      "in": "path",
      "description": "Id of object",
      "required": true,
      "type": "integer"
    },
    "flag_id": {
      "name": "id",
      "in": "path",
      "description": "Id of flag",
      "required": true,
      "type": "integer"
    },
    "like_id": {
      "name": "id",
      "in": "path",
      "description": "Id of like",
      "required": true,
      "type": "integer"
    },
    "follow_id": {
      "name": "id",
      "in": "path",
      "description": "Id of follow",
      "required": true,
      "type": "integer"
    },
    "comment_id": {
      "name": "id",
      "in": "path",
      "description": "Id of comment",
      "required": true,
      "type": "integer"
    },
    "group_id": {
      "name": "id",
      "in": "path",
      "description": "Id of group",
      "required": true,
      "type": "integer"
    },
    "review_id": {
      "name": "id",
      "in": "path",
      "description": "Id of review",
      "required": true,
      "type": "integer"
    },
    "profile_id": {
      "name": "profile_id",
      "in": "path",
      "description": "Id of profile",
      "required": true,
      "type": "integer"
    },
    "quarantine_id": {
      "name": "id",
      "in": "path",
      "description": "Id of quarantine",
      "required": true,
      "type": "integer"
    },
    "profilePost": {
      "name": "profile",
      "in": "body",
      "description": "The profile to create.",
      "schema": {
        "$ref": "#/definitions/ProfilePut"
      }
    },
    "username": {
      "name": "username",
      "in": "path",
      "description": "Username",
      "required": true,
      "type": "string"
    },
    "groupPut": {
      "name": "group",
      "in": "body",
      "description": "The group to update",
      "schema": {
        "$ref": "#/definitions/GroupPut"
      }
    },
    "groupname": {
      "name": "groupname",
      "in": "path",
      "description": "Groupname",
      "required": true,
      "type": "string"
    },
    "postPost": {
      "name": "post",
      "in": "body",
      "description": "The post to create.",
      "schema": {
        "$ref": "#/definitions/PostPost"
      }
    },
    "postPut": {
      "name": "post",
      "in": "body",
      "description": "The post to create.",
      "schema": {
        "$ref": "#/definitions/PostPut"
      }
    },
    "commentPost": {
      "name": "comment",
      "in": "body",
      "description": "The object representing the comment to create",
      "schema": {
        "$ref": "#/definitions/CommentPost"
      }
    },
    "commentPut": {
      "name": "comment",
      "in": "body",
      "description": "The object representing the updates that should made to the comment",
      "schema": {
        "$ref": "#/definitions/CommentPut"
      }
    },
    "reviewPut": {
      "name": "review",
      "in": "body",
      "description": "a review definition",
      "schema": {
        "$ref": "#/definitions/ReviewPut"
      }
    },
    "quarantinePut": {
      "name": "quarantine",
      "in": "body",
      "description": "a quarantine definition",
      "schema": {
        "$ref": "#/definitions/QuarantinePut"
      }
    },
    "modified_by": {
      "name": "Deleted By",
      "in": "body",
      "description": "Id of profile modifiying the object.",
      "schema": {
        "properties": {
          "modified_by": {
            "type": "integer"
          }
        }
      }
    }
  },
  "responses": {
    "Profile": {
      "description": "A profile object.",
      "schema": {
        "$ref": "#/definitions/Profile"
      }
    },
    "Profiles": {
      "description": "A list of profiles.",
      "schema": {
        "$ref": "#/definitions/Profiles"
      }
    },
    "Activity": {
      "description": "All activity made by user",
      "schema": {
        "$ref": "#/definitions/Activity"
      }
    },
    "UserIsFollowingGroup": {
      "description": "Returns the ID of the follow action",
      "schema": {
        "$ref": "#/definitions/UserIsFollowingGroup"
      }
    },
    "Group": {
      "description": "A group object.",
      "schema": {
        "$ref": "#/definitions/Group"
      }
    },
    "Groups": {
      "description": "A list of groups",
      "schema": {
        "$ref": "#/definitions/Groups"
      }
    },
    "GroupnameExists": {
      "description": "The group ID is returned if the groupname is found otherwise 400 is returned and the data object will be present but empty",
      "schema": {
        "$ref": "#/definitions/GroupnameExists"
      }
    },
    "Like": {
      "description": "A like.",
      "schema": {
        "$ref": "#/definitions/Like"
      }
    },
    "Likes": {
      "description": "A list of likes",
      "schema": {
        "$ref": "#/definitions/Likes"
      }
    },
    "UsernameExists": {
      "description": "The profile ID is returned if the username is found otherwise 400 is returned and the data object will be present but empty",
      "schema": {
        "$ref": "#/definitions/UsernameExists"
      }
    },
    "Follow": {
      "description": "A follow object.",
      "schema": {
        "$ref": "#/definitions/Follow"
      }
    },
    "Follows": {
      "description": "A list of follows",
      "schema": {
        "$ref": "#/definitions/Follows"
      }
    },
    "Flag": {
      "description": "A flag object.",
      "schema": {
        "$ref": "#/definitions/Flag"
      }
    },
    "Flags": {
      "description": "A list of flags",
      "schema": {
        "$ref": "#/definitions/Flags"
      }
    },
    "Post": {
      "description": "A post object.",
      "schema": {
        "$ref": "#/definitions/Post"
      }
    },
    "Posts": {
      "description": "A list of posts.",
      "schema": {
        "$ref": "#/definitions/Posts"
      }
    },
    "Comment": {
      "description": "A comment object.",
      "schema": {
        "$ref": "#/definitions/Comment"
      }
    },
    "Comments": {
      "description": "A list of comments.",
      "schema": {
        "$ref": "#/definitions/Comments"
      }
    },
    "Review": {
      "description": "A review object.",
      "schema": {
        "$ref": "#/definitions/Review"
      }
    },
    "Reviews": {
      "description": "A list of reviews.",
      "schema": {
        "$ref": "#/definitions/Reviews"
      }
    },
    "Quarantine": {
      "description": "A Quarantine object.",
      "schema": {
        "$ref": "#/definitions/Quarantine"
      }
    },
    "Quarantines": {
      "description": "A list of Quarantines.",
      "schema": {
        "$ref": "#/definitions/Quarantines"
      }
    },
    "Error": {
      "description": "An unexpected error occured.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "InvalidToken": {
      "description": "Invalid token is used",
      "schema": {
        "$ref": "#/definitions/InvalidToken"
      }
    },
    "InvalidUser": {
      "description": "Invalid user token",
      "schema": {
        "$ref": "#/definitions/InvalidUser"
      }
    }
  }
}
